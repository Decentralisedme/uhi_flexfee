{"version":3,"sources":["../src/index.ts","../proto/common/circuit_data.ts","../proto/sdk/types.ts","../proto/sdk/prover.ts","../src/brevis-client.ts","../proto/brevis/types.ts","../proto/brevis/gateway.ts","../src/circuit-types.ts","../src/prover-client.ts","../src/request.ts"],"sourcesContent":["export { ErrCode } from '../proto/sdk/prover';\nexport { Field, ReceiptData, StorageData, TransactionData } from '../proto/sdk/types';\nexport { Brevis } from '../src/brevis-client';\nexport { asBytes32, asInt248, asUint248, asUint521 } from '../src/circuit-types';\nexport { Prover } from '../src/prover-client';\nexport { ProofRequest } from '../src/request';\nexport { ProveResponse } from './../proto/sdk/prover';\n","/**\n * Generated by the protoc-gen-ts.  DO NOT EDIT!\n * compiler version: 4.23.4\n * source: common/circuit_data.proto\n * git: https://github.com/thesayyn/protoc-gen-ts */\nimport * as pb_1 from \"google-protobuf\";\nexport class AppCircuitInfo extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        output_commitment?: string;\n        vk?: string;\n        input_commitments?: string[];\n        toggles_commitment?: string;\n        toggles?: boolean[];\n        use_callback?: boolean;\n        output?: string;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 5], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"output_commitment\" in data && data.output_commitment != undefined) {\n                this.output_commitment = data.output_commitment;\n            }\n            if (\"vk\" in data && data.vk != undefined) {\n                this.vk = data.vk;\n            }\n            if (\"input_commitments\" in data && data.input_commitments != undefined) {\n                this.input_commitments = data.input_commitments;\n            }\n            if (\"toggles_commitment\" in data && data.toggles_commitment != undefined) {\n                this.toggles_commitment = data.toggles_commitment;\n            }\n            if (\"toggles\" in data && data.toggles != undefined) {\n                this.toggles = data.toggles;\n            }\n            if (\"use_callback\" in data && data.use_callback != undefined) {\n                this.use_callback = data.use_callback;\n            }\n            if (\"output\" in data && data.output != undefined) {\n                this.output = data.output;\n            }\n        }\n    }\n    get output_commitment() {\n        return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n    }\n    set output_commitment(value: string) {\n        pb_1.Message.setField(this, 1, value);\n    }\n    get vk() {\n        return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n    }\n    set vk(value: string) {\n        pb_1.Message.setField(this, 2, value);\n    }\n    get input_commitments() {\n        return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];\n    }\n    set input_commitments(value: string[]) {\n        pb_1.Message.setField(this, 3, value);\n    }\n    get toggles_commitment() {\n        return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n    }\n    set toggles_commitment(value: string) {\n        pb_1.Message.setField(this, 4, value);\n    }\n    get toggles() {\n        return pb_1.Message.getFieldWithDefault(this, 5, []) as boolean[];\n    }\n    set toggles(value: boolean[]) {\n        pb_1.Message.setField(this, 5, value);\n    }\n    get use_callback() {\n        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;\n    }\n    set use_callback(value: boolean) {\n        pb_1.Message.setField(this, 6, value);\n    }\n    get output() {\n        return pb_1.Message.getFieldWithDefault(this, 7, \"\") as string;\n    }\n    set output(value: string) {\n        pb_1.Message.setField(this, 7, value);\n    }\n    static fromObject(data: {\n        output_commitment?: string;\n        vk?: string;\n        input_commitments?: string[];\n        toggles_commitment?: string;\n        toggles?: boolean[];\n        use_callback?: boolean;\n        output?: string;\n    }): AppCircuitInfo {\n        const message = new AppCircuitInfo({});\n        if (data.output_commitment != null) {\n            message.output_commitment = data.output_commitment;\n        }\n        if (data.vk != null) {\n            message.vk = data.vk;\n        }\n        if (data.input_commitments != null) {\n            message.input_commitments = data.input_commitments;\n        }\n        if (data.toggles_commitment != null) {\n            message.toggles_commitment = data.toggles_commitment;\n        }\n        if (data.toggles != null) {\n            message.toggles = data.toggles;\n        }\n        if (data.use_callback != null) {\n            message.use_callback = data.use_callback;\n        }\n        if (data.output != null) {\n            message.output = data.output;\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            output_commitment?: string;\n            vk?: string;\n            input_commitments?: string[];\n            toggles_commitment?: string;\n            toggles?: boolean[];\n            use_callback?: boolean;\n            output?: string;\n        } = {};\n        if (this.output_commitment != null) {\n            data.output_commitment = this.output_commitment;\n        }\n        if (this.vk != null) {\n            data.vk = this.vk;\n        }\n        if (this.input_commitments != null) {\n            data.input_commitments = this.input_commitments;\n        }\n        if (this.toggles_commitment != null) {\n            data.toggles_commitment = this.toggles_commitment;\n        }\n        if (this.toggles != null) {\n            data.toggles = this.toggles;\n        }\n        if (this.use_callback != null) {\n            data.use_callback = this.use_callback;\n        }\n        if (this.output != null) {\n            data.output = this.output;\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.output_commitment.length)\n            writer.writeString(1, this.output_commitment);\n        if (this.vk.length)\n            writer.writeString(2, this.vk);\n        if (this.input_commitments.length)\n            writer.writeRepeatedString(3, this.input_commitments);\n        if (this.toggles_commitment.length)\n            writer.writeString(4, this.toggles_commitment);\n        if (this.toggles.length)\n            writer.writePackedBool(5, this.toggles);\n        if (this.use_callback != false)\n            writer.writeBool(6, this.use_callback);\n        if (this.output.length)\n            writer.writeString(7, this.output);\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AppCircuitInfo {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AppCircuitInfo();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    message.output_commitment = reader.readString();\n                    break;\n                case 2:\n                    message.vk = reader.readString();\n                    break;\n                case 3:\n                    pb_1.Message.addToRepeatedField(message, 3, reader.readString());\n                    break;\n                case 4:\n                    message.toggles_commitment = reader.readString();\n                    break;\n                case 5:\n                    message.toggles = reader.readPackedBool();\n                    break;\n                case 6:\n                    message.use_callback = reader.readBool();\n                    break;\n                case 7:\n                    message.output = reader.readString();\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): AppCircuitInfo {\n        return AppCircuitInfo.deserialize(bytes);\n    }\n}\n","/**\n * Generated by the protoc-gen-ts.  DO NOT EDIT!\n * compiler version: 4.23.4\n * source: sdk/types.proto\n * git: https://github.com/thesayyn/protoc-gen-ts */\nimport * as dependency_1 from \"./../common/circuit_data\";\nimport * as pb_1 from \"google-protobuf\";\nexport class ReceiptData extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        block_num?: number;\n        tx_hash?: string;\n        fields?: Field[];\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"block_num\" in data && data.block_num != undefined) {\n                this.block_num = data.block_num;\n            }\n            if (\"tx_hash\" in data && data.tx_hash != undefined) {\n                this.tx_hash = data.tx_hash;\n            }\n            if (\"fields\" in data && data.fields != undefined) {\n                this.fields = data.fields;\n            }\n        }\n    }\n    get block_num() {\n        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n    }\n    set block_num(value: number) {\n        pb_1.Message.setField(this, 1, value);\n    }\n    get tx_hash() {\n        return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n    }\n    set tx_hash(value: string) {\n        pb_1.Message.setField(this, 2, value);\n    }\n    get fields() {\n        return pb_1.Message.getRepeatedWrapperField(this, Field, 3) as Field[];\n    }\n    set fields(value: Field[]) {\n        pb_1.Message.setRepeatedWrapperField(this, 3, value);\n    }\n    static fromObject(data: {\n        block_num?: number;\n        tx_hash?: string;\n        fields?: ReturnType<typeof Field.prototype.toObject>[];\n    }): ReceiptData {\n        const message = new ReceiptData({});\n        if (data.block_num != null) {\n            message.block_num = data.block_num;\n        }\n        if (data.tx_hash != null) {\n            message.tx_hash = data.tx_hash;\n        }\n        if (data.fields != null) {\n            message.fields = data.fields.map(item => Field.fromObject(item));\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            block_num?: number;\n            tx_hash?: string;\n            fields?: ReturnType<typeof Field.prototype.toObject>[];\n        } = {};\n        if (this.block_num != null) {\n            data.block_num = this.block_num;\n        }\n        if (this.tx_hash != null) {\n            data.tx_hash = this.tx_hash;\n        }\n        if (this.fields != null) {\n            data.fields = this.fields.map((item: Field) => item.toObject());\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.block_num != 0)\n            writer.writeUint64(1, this.block_num);\n        if (this.tx_hash.length)\n            writer.writeString(2, this.tx_hash);\n        if (this.fields.length)\n            writer.writeRepeatedMessage(3, this.fields, (item: Field) => item.serialize(writer));\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReceiptData {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReceiptData();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    message.block_num = reader.readUint64();\n                    break;\n                case 2:\n                    message.tx_hash = reader.readString();\n                    break;\n                case 3:\n                    reader.readMessage(message.fields, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Field.deserialize(reader), Field));\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): ReceiptData {\n        return ReceiptData.deserialize(bytes);\n    }\n}\nexport class Field extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        contract?: string;\n        log_index?: number;\n        event_id?: string;\n        value?: string;\n        is_topic?: boolean;\n        field_index?: number;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"contract\" in data && data.contract != undefined) {\n                this.contract = data.contract;\n            }\n            if (\"log_index\" in data && data.log_index != undefined) {\n                this.log_index = data.log_index;\n            }\n            if (\"event_id\" in data && data.event_id != undefined) {\n                this.event_id = data.event_id;\n            }\n            if (\"value\" in data && data.value != undefined) {\n                this.value = data.value;\n            }\n            if (\"is_topic\" in data && data.is_topic != undefined) {\n                this.is_topic = data.is_topic;\n            }\n            if (\"field_index\" in data && data.field_index != undefined) {\n                this.field_index = data.field_index;\n            }\n        }\n    }\n    get contract() {\n        return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n    }\n    set contract(value: string) {\n        pb_1.Message.setField(this, 1, value);\n    }\n    get log_index() {\n        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n    }\n    set log_index(value: number) {\n        pb_1.Message.setField(this, 2, value);\n    }\n    get event_id() {\n        return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n    }\n    set event_id(value: string) {\n        pb_1.Message.setField(this, 3, value);\n    }\n    get value() {\n        return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n    }\n    set value(value: string) {\n        pb_1.Message.setField(this, 4, value);\n    }\n    get is_topic() {\n        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;\n    }\n    set is_topic(value: boolean) {\n        pb_1.Message.setField(this, 5, value);\n    }\n    get field_index() {\n        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;\n    }\n    set field_index(value: number) {\n        pb_1.Message.setField(this, 6, value);\n    }\n    static fromObject(data: {\n        contract?: string;\n        log_index?: number;\n        event_id?: string;\n        value?: string;\n        is_topic?: boolean;\n        field_index?: number;\n    }): Field {\n        const message = new Field({});\n        if (data.contract != null) {\n            message.contract = data.contract;\n        }\n        if (data.log_index != null) {\n            message.log_index = data.log_index;\n        }\n        if (data.event_id != null) {\n            message.event_id = data.event_id;\n        }\n        if (data.value != null) {\n            message.value = data.value;\n        }\n        if (data.is_topic != null) {\n            message.is_topic = data.is_topic;\n        }\n        if (data.field_index != null) {\n            message.field_index = data.field_index;\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            contract?: string;\n            log_index?: number;\n            event_id?: string;\n            value?: string;\n            is_topic?: boolean;\n            field_index?: number;\n        } = {};\n        if (this.contract != null) {\n            data.contract = this.contract;\n        }\n        if (this.log_index != null) {\n            data.log_index = this.log_index;\n        }\n        if (this.event_id != null) {\n            data.event_id = this.event_id;\n        }\n        if (this.value != null) {\n            data.value = this.value;\n        }\n        if (this.is_topic != null) {\n            data.is_topic = this.is_topic;\n        }\n        if (this.field_index != null) {\n            data.field_index = this.field_index;\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.contract.length)\n            writer.writeString(1, this.contract);\n        if (this.log_index != 0)\n            writer.writeUint32(2, this.log_index);\n        if (this.event_id.length)\n            writer.writeString(3, this.event_id);\n        if (this.value.length)\n            writer.writeString(4, this.value);\n        if (this.is_topic != false)\n            writer.writeBool(5, this.is_topic);\n        if (this.field_index != 0)\n            writer.writeUint32(6, this.field_index);\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Field {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Field();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    message.contract = reader.readString();\n                    break;\n                case 2:\n                    message.log_index = reader.readUint32();\n                    break;\n                case 3:\n                    message.event_id = reader.readString();\n                    break;\n                case 4:\n                    message.value = reader.readString();\n                    break;\n                case 5:\n                    message.is_topic = reader.readBool();\n                    break;\n                case 6:\n                    message.field_index = reader.readUint32();\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): Field {\n        return Field.deserialize(bytes);\n    }\n}\nexport class StorageData extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        block_num?: number;\n        address?: string;\n        slot?: string;\n        value?: string;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"block_num\" in data && data.block_num != undefined) {\n                this.block_num = data.block_num;\n            }\n            if (\"address\" in data && data.address != undefined) {\n                this.address = data.address;\n            }\n            if (\"slot\" in data && data.slot != undefined) {\n                this.slot = data.slot;\n            }\n            if (\"value\" in data && data.value != undefined) {\n                this.value = data.value;\n            }\n        }\n    }\n    get block_num() {\n        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n    }\n    set block_num(value: number) {\n        pb_1.Message.setField(this, 1, value);\n    }\n    get address() {\n        return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n    }\n    set address(value: string) {\n        pb_1.Message.setField(this, 2, value);\n    }\n    get slot() {\n        return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n    }\n    set slot(value: string) {\n        pb_1.Message.setField(this, 3, value);\n    }\n    get value() {\n        return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n    }\n    set value(value: string) {\n        pb_1.Message.setField(this, 4, value);\n    }\n    static fromObject(data: {\n        block_num?: number;\n        address?: string;\n        slot?: string;\n        value?: string;\n    }): StorageData {\n        const message = new StorageData({});\n        if (data.block_num != null) {\n            message.block_num = data.block_num;\n        }\n        if (data.address != null) {\n            message.address = data.address;\n        }\n        if (data.slot != null) {\n            message.slot = data.slot;\n        }\n        if (data.value != null) {\n            message.value = data.value;\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            block_num?: number;\n            address?: string;\n            slot?: string;\n            value?: string;\n        } = {};\n        if (this.block_num != null) {\n            data.block_num = this.block_num;\n        }\n        if (this.address != null) {\n            data.address = this.address;\n        }\n        if (this.slot != null) {\n            data.slot = this.slot;\n        }\n        if (this.value != null) {\n            data.value = this.value;\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.block_num != 0)\n            writer.writeUint64(1, this.block_num);\n        if (this.address.length)\n            writer.writeString(2, this.address);\n        if (this.slot.length)\n            writer.writeString(3, this.slot);\n        if (this.value.length)\n            writer.writeString(4, this.value);\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StorageData {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StorageData();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    message.block_num = reader.readUint64();\n                    break;\n                case 2:\n                    message.address = reader.readString();\n                    break;\n                case 3:\n                    message.slot = reader.readString();\n                    break;\n                case 4:\n                    message.value = reader.readString();\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): StorageData {\n        return StorageData.deserialize(bytes);\n    }\n}\nexport class TransactionData extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        hash?: string;\n        chain_id?: number;\n        block_num?: number;\n        nonce?: number;\n        gas_tip_cap_or_gas_price?: string;\n        gas_fee_cap?: string;\n        gas_limit?: number;\n        from?: string;\n        to?: string;\n        value?: string;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"hash\" in data && data.hash != undefined) {\n                this.hash = data.hash;\n            }\n            if (\"chain_id\" in data && data.chain_id != undefined) {\n                this.chain_id = data.chain_id;\n            }\n            if (\"block_num\" in data && data.block_num != undefined) {\n                this.block_num = data.block_num;\n            }\n            if (\"nonce\" in data && data.nonce != undefined) {\n                this.nonce = data.nonce;\n            }\n            if (\"gas_tip_cap_or_gas_price\" in data && data.gas_tip_cap_or_gas_price != undefined) {\n                this.gas_tip_cap_or_gas_price = data.gas_tip_cap_or_gas_price;\n            }\n            if (\"gas_fee_cap\" in data && data.gas_fee_cap != undefined) {\n                this.gas_fee_cap = data.gas_fee_cap;\n            }\n            if (\"gas_limit\" in data && data.gas_limit != undefined) {\n                this.gas_limit = data.gas_limit;\n            }\n            if (\"from\" in data && data.from != undefined) {\n                this.from = data.from;\n            }\n            if (\"to\" in data && data.to != undefined) {\n                this.to = data.to;\n            }\n            if (\"value\" in data && data.value != undefined) {\n                this.value = data.value;\n            }\n        }\n    }\n    get hash() {\n        return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n    }\n    set hash(value: string) {\n        pb_1.Message.setField(this, 1, value);\n    }\n    get chain_id() {\n        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n    }\n    set chain_id(value: number) {\n        pb_1.Message.setField(this, 2, value);\n    }\n    get block_num() {\n        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n    }\n    set block_num(value: number) {\n        pb_1.Message.setField(this, 3, value);\n    }\n    get nonce() {\n        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n    }\n    set nonce(value: number) {\n        pb_1.Message.setField(this, 4, value);\n    }\n    get gas_tip_cap_or_gas_price() {\n        return pb_1.Message.getFieldWithDefault(this, 5, \"\") as string;\n    }\n    set gas_tip_cap_or_gas_price(value: string) {\n        pb_1.Message.setField(this, 5, value);\n    }\n    get gas_fee_cap() {\n        return pb_1.Message.getFieldWithDefault(this, 6, \"\") as string;\n    }\n    set gas_fee_cap(value: string) {\n        pb_1.Message.setField(this, 6, value);\n    }\n    get gas_limit() {\n        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;\n    }\n    set gas_limit(value: number) {\n        pb_1.Message.setField(this, 7, value);\n    }\n    get from() {\n        return pb_1.Message.getFieldWithDefault(this, 8, \"\") as string;\n    }\n    set from(value: string) {\n        pb_1.Message.setField(this, 8, value);\n    }\n    get to() {\n        return pb_1.Message.getFieldWithDefault(this, 9, \"\") as string;\n    }\n    set to(value: string) {\n        pb_1.Message.setField(this, 9, value);\n    }\n    get value() {\n        return pb_1.Message.getFieldWithDefault(this, 10, \"\") as string;\n    }\n    set value(value: string) {\n        pb_1.Message.setField(this, 10, value);\n    }\n    static fromObject(data: {\n        hash?: string;\n        chain_id?: number;\n        block_num?: number;\n        nonce?: number;\n        gas_tip_cap_or_gas_price?: string;\n        gas_fee_cap?: string;\n        gas_limit?: number;\n        from?: string;\n        to?: string;\n        value?: string;\n    }): TransactionData {\n        const message = new TransactionData({});\n        if (data.hash != null) {\n            message.hash = data.hash;\n        }\n        if (data.chain_id != null) {\n            message.chain_id = data.chain_id;\n        }\n        if (data.block_num != null) {\n            message.block_num = data.block_num;\n        }\n        if (data.nonce != null) {\n            message.nonce = data.nonce;\n        }\n        if (data.gas_tip_cap_or_gas_price != null) {\n            message.gas_tip_cap_or_gas_price = data.gas_tip_cap_or_gas_price;\n        }\n        if (data.gas_fee_cap != null) {\n            message.gas_fee_cap = data.gas_fee_cap;\n        }\n        if (data.gas_limit != null) {\n            message.gas_limit = data.gas_limit;\n        }\n        if (data.from != null) {\n            message.from = data.from;\n        }\n        if (data.to != null) {\n            message.to = data.to;\n        }\n        if (data.value != null) {\n            message.value = data.value;\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            hash?: string;\n            chain_id?: number;\n            block_num?: number;\n            nonce?: number;\n            gas_tip_cap_or_gas_price?: string;\n            gas_fee_cap?: string;\n            gas_limit?: number;\n            from?: string;\n            to?: string;\n            value?: string;\n        } = {};\n        if (this.hash != null) {\n            data.hash = this.hash;\n        }\n        if (this.chain_id != null) {\n            data.chain_id = this.chain_id;\n        }\n        if (this.block_num != null) {\n            data.block_num = this.block_num;\n        }\n        if (this.nonce != null) {\n            data.nonce = this.nonce;\n        }\n        if (this.gas_tip_cap_or_gas_price != null) {\n            data.gas_tip_cap_or_gas_price = this.gas_tip_cap_or_gas_price;\n        }\n        if (this.gas_fee_cap != null) {\n            data.gas_fee_cap = this.gas_fee_cap;\n        }\n        if (this.gas_limit != null) {\n            data.gas_limit = this.gas_limit;\n        }\n        if (this.from != null) {\n            data.from = this.from;\n        }\n        if (this.to != null) {\n            data.to = this.to;\n        }\n        if (this.value != null) {\n            data.value = this.value;\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.hash.length)\n            writer.writeString(1, this.hash);\n        if (this.chain_id != 0)\n            writer.writeUint64(2, this.chain_id);\n        if (this.block_num != 0)\n            writer.writeUint64(3, this.block_num);\n        if (this.nonce != 0)\n            writer.writeUint64(4, this.nonce);\n        if (this.gas_tip_cap_or_gas_price.length)\n            writer.writeString(5, this.gas_tip_cap_or_gas_price);\n        if (this.gas_fee_cap.length)\n            writer.writeString(6, this.gas_fee_cap);\n        if (this.gas_limit != 0)\n            writer.writeUint64(7, this.gas_limit);\n        if (this.from.length)\n            writer.writeString(8, this.from);\n        if (this.to.length)\n            writer.writeString(9, this.to);\n        if (this.value.length)\n            writer.writeString(10, this.value);\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionData {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionData();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    message.hash = reader.readString();\n                    break;\n                case 2:\n                    message.chain_id = reader.readUint64();\n                    break;\n                case 3:\n                    message.block_num = reader.readUint64();\n                    break;\n                case 4:\n                    message.nonce = reader.readUint64();\n                    break;\n                case 5:\n                    message.gas_tip_cap_or_gas_price = reader.readString();\n                    break;\n                case 6:\n                    message.gas_fee_cap = reader.readString();\n                    break;\n                case 7:\n                    message.gas_limit = reader.readUint64();\n                    break;\n                case 8:\n                    message.from = reader.readString();\n                    break;\n                case 9:\n                    message.to = reader.readString();\n                    break;\n                case 10:\n                    message.value = reader.readString();\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): TransactionData {\n        return TransactionData.deserialize(bytes);\n    }\n}\nexport class CustomInput extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        json_bytes?: string;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"json_bytes\" in data && data.json_bytes != undefined) {\n                this.json_bytes = data.json_bytes;\n            }\n        }\n    }\n    get json_bytes() {\n        return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n    }\n    set json_bytes(value: string) {\n        pb_1.Message.setField(this, 1, value);\n    }\n    static fromObject(data: {\n        json_bytes?: string;\n    }): CustomInput {\n        const message = new CustomInput({});\n        if (data.json_bytes != null) {\n            message.json_bytes = data.json_bytes;\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            json_bytes?: string;\n        } = {};\n        if (this.json_bytes != null) {\n            data.json_bytes = this.json_bytes;\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.json_bytes.length)\n            writer.writeString(1, this.json_bytes);\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomInput {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomInput();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    message.json_bytes = reader.readString();\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): CustomInput {\n        return CustomInput.deserialize(bytes);\n    }\n}\nexport class IndexedReceipt extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        index?: number;\n        data?: ReceiptData;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"index\" in data && data.index != undefined) {\n                this.index = data.index;\n            }\n            if (\"data\" in data && data.data != undefined) {\n                this.data = data.data;\n            }\n        }\n    }\n    get index() {\n        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n    }\n    set index(value: number) {\n        pb_1.Message.setField(this, 1, value);\n    }\n    get data() {\n        return pb_1.Message.getWrapperField(this, ReceiptData, 2) as ReceiptData;\n    }\n    set data(value: ReceiptData) {\n        pb_1.Message.setWrapperField(this, 2, value);\n    }\n    get has_data() {\n        return pb_1.Message.getField(this, 2) != null;\n    }\n    static fromObject(data: {\n        index?: number;\n        data?: ReturnType<typeof ReceiptData.prototype.toObject>;\n    }): IndexedReceipt {\n        const message = new IndexedReceipt({});\n        if (data.index != null) {\n            message.index = data.index;\n        }\n        if (data.data != null) {\n            message.data = ReceiptData.fromObject(data.data);\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            index?: number;\n            data?: ReturnType<typeof ReceiptData.prototype.toObject>;\n        } = {};\n        if (this.index != null) {\n            data.index = this.index;\n        }\n        if (this.data != null) {\n            data.data = this.data.toObject();\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.index != 0)\n            writer.writeUint32(1, this.index);\n        if (this.has_data)\n            writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IndexedReceipt {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IndexedReceipt();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    message.index = reader.readUint32();\n                    break;\n                case 2:\n                    reader.readMessage(message.data, () => message.data = ReceiptData.deserialize(reader));\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): IndexedReceipt {\n        return IndexedReceipt.deserialize(bytes);\n    }\n}\nexport class IndexedStorage extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        index?: number;\n        data?: StorageData;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"index\" in data && data.index != undefined) {\n                this.index = data.index;\n            }\n            if (\"data\" in data && data.data != undefined) {\n                this.data = data.data;\n            }\n        }\n    }\n    get index() {\n        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n    }\n    set index(value: number) {\n        pb_1.Message.setField(this, 1, value);\n    }\n    get data() {\n        return pb_1.Message.getWrapperField(this, StorageData, 2) as StorageData;\n    }\n    set data(value: StorageData) {\n        pb_1.Message.setWrapperField(this, 2, value);\n    }\n    get has_data() {\n        return pb_1.Message.getField(this, 2) != null;\n    }\n    static fromObject(data: {\n        index?: number;\n        data?: ReturnType<typeof StorageData.prototype.toObject>;\n    }): IndexedStorage {\n        const message = new IndexedStorage({});\n        if (data.index != null) {\n            message.index = data.index;\n        }\n        if (data.data != null) {\n            message.data = StorageData.fromObject(data.data);\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            index?: number;\n            data?: ReturnType<typeof StorageData.prototype.toObject>;\n        } = {};\n        if (this.index != null) {\n            data.index = this.index;\n        }\n        if (this.data != null) {\n            data.data = this.data.toObject();\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.index != 0)\n            writer.writeUint32(1, this.index);\n        if (this.has_data)\n            writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IndexedStorage {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IndexedStorage();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    message.index = reader.readUint32();\n                    break;\n                case 2:\n                    reader.readMessage(message.data, () => message.data = StorageData.deserialize(reader));\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): IndexedStorage {\n        return IndexedStorage.deserialize(bytes);\n    }\n}\nexport class IndexedTransaction extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        index?: number;\n        data?: TransactionData;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"index\" in data && data.index != undefined) {\n                this.index = data.index;\n            }\n            if (\"data\" in data && data.data != undefined) {\n                this.data = data.data;\n            }\n        }\n    }\n    get index() {\n        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n    }\n    set index(value: number) {\n        pb_1.Message.setField(this, 1, value);\n    }\n    get data() {\n        return pb_1.Message.getWrapperField(this, TransactionData, 2) as TransactionData;\n    }\n    set data(value: TransactionData) {\n        pb_1.Message.setWrapperField(this, 2, value);\n    }\n    get has_data() {\n        return pb_1.Message.getField(this, 2) != null;\n    }\n    static fromObject(data: {\n        index?: number;\n        data?: ReturnType<typeof TransactionData.prototype.toObject>;\n    }): IndexedTransaction {\n        const message = new IndexedTransaction({});\n        if (data.index != null) {\n            message.index = data.index;\n        }\n        if (data.data != null) {\n            message.data = TransactionData.fromObject(data.data);\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            index?: number;\n            data?: ReturnType<typeof TransactionData.prototype.toObject>;\n        } = {};\n        if (this.index != null) {\n            data.index = this.index;\n        }\n        if (this.data != null) {\n            data.data = this.data.toObject();\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.index != 0)\n            writer.writeUint32(1, this.index);\n        if (this.has_data)\n            writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IndexedTransaction {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IndexedTransaction();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    message.index = reader.readUint32();\n                    break;\n                case 2:\n                    reader.readMessage(message.data, () => message.data = TransactionData.deserialize(reader));\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): IndexedTransaction {\n        return IndexedTransaction.deserialize(bytes);\n    }\n}\nexport class Proof extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        proof?: string;\n        circuit_info?: dependency_1.AppCircuitInfo;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"proof\" in data && data.proof != undefined) {\n                this.proof = data.proof;\n            }\n            if (\"circuit_info\" in data && data.circuit_info != undefined) {\n                this.circuit_info = data.circuit_info;\n            }\n        }\n    }\n    get proof() {\n        return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n    }\n    set proof(value: string) {\n        pb_1.Message.setField(this, 1, value);\n    }\n    get circuit_info() {\n        return pb_1.Message.getWrapperField(this, dependency_1.AppCircuitInfo, 2) as dependency_1.AppCircuitInfo;\n    }\n    set circuit_info(value: dependency_1.AppCircuitInfo) {\n        pb_1.Message.setWrapperField(this, 2, value);\n    }\n    get has_circuit_info() {\n        return pb_1.Message.getField(this, 2) != null;\n    }\n    static fromObject(data: {\n        proof?: string;\n        circuit_info?: ReturnType<typeof dependency_1.AppCircuitInfo.prototype.toObject>;\n    }): Proof {\n        const message = new Proof({});\n        if (data.proof != null) {\n            message.proof = data.proof;\n        }\n        if (data.circuit_info != null) {\n            message.circuit_info = dependency_1.AppCircuitInfo.fromObject(data.circuit_info);\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            proof?: string;\n            circuit_info?: ReturnType<typeof dependency_1.AppCircuitInfo.prototype.toObject>;\n        } = {};\n        if (this.proof != null) {\n            data.proof = this.proof;\n        }\n        if (this.circuit_info != null) {\n            data.circuit_info = this.circuit_info.toObject();\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.proof.length)\n            writer.writeString(1, this.proof);\n        if (this.has_circuit_info)\n            writer.writeMessage(2, this.circuit_info, () => this.circuit_info.serialize(writer));\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Proof {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Proof();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    message.proof = reader.readString();\n                    break;\n                case 2:\n                    reader.readMessage(message.circuit_info, () => message.circuit_info = dependency_1.AppCircuitInfo.deserialize(reader));\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): Proof {\n        return Proof.deserialize(bytes);\n    }\n}\n","/**\n * Generated by the protoc-gen-ts.  DO NOT EDIT!\n * compiler version: 4.23.4\n * source: sdk/prover.proto\n * git: https://github.com/thesayyn/protoc-gen-ts */\nimport * as dependency_1 from \"./types\";\nimport * as dependency_2 from \"./../common/circuit_data\";\nimport * as dependency_3 from \"./../google/api/annotations\";\nimport * as pb_1 from \"google-protobuf\";\nimport * as grpc_1 from \"@grpc/grpc-js\";\nexport enum ErrCode {\n    ERROR_UNDEFINED = 0,\n    ERROR_DEFAULT = 1,\n    ERROR_INVALID_INPUT = 2,\n    ERROR_INVALID_CUSTOM_INPUT = 3,\n    ERROR_FAILED_TO_PROVE = 4\n}\nexport class ProveRequest extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        receipts?: dependency_1.IndexedReceipt[];\n        storages?: dependency_1.IndexedStorage[];\n        transactions?: dependency_1.IndexedTransaction[];\n        custom_input?: dependency_1.CustomInput;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"receipts\" in data && data.receipts != undefined) {\n                this.receipts = data.receipts;\n            }\n            if (\"storages\" in data && data.storages != undefined) {\n                this.storages = data.storages;\n            }\n            if (\"transactions\" in data && data.transactions != undefined) {\n                this.transactions = data.transactions;\n            }\n            if (\"custom_input\" in data && data.custom_input != undefined) {\n                this.custom_input = data.custom_input;\n            }\n        }\n    }\n    get receipts() {\n        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.IndexedReceipt, 1) as dependency_1.IndexedReceipt[];\n    }\n    set receipts(value: dependency_1.IndexedReceipt[]) {\n        pb_1.Message.setRepeatedWrapperField(this, 1, value);\n    }\n    get storages() {\n        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.IndexedStorage, 2) as dependency_1.IndexedStorage[];\n    }\n    set storages(value: dependency_1.IndexedStorage[]) {\n        pb_1.Message.setRepeatedWrapperField(this, 2, value);\n    }\n    get transactions() {\n        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.IndexedTransaction, 3) as dependency_1.IndexedTransaction[];\n    }\n    set transactions(value: dependency_1.IndexedTransaction[]) {\n        pb_1.Message.setRepeatedWrapperField(this, 3, value);\n    }\n    get custom_input() {\n        return pb_1.Message.getWrapperField(this, dependency_1.CustomInput, 4) as dependency_1.CustomInput;\n    }\n    set custom_input(value: dependency_1.CustomInput) {\n        pb_1.Message.setWrapperField(this, 4, value);\n    }\n    get has_custom_input() {\n        return pb_1.Message.getField(this, 4) != null;\n    }\n    static fromObject(data: {\n        receipts?: ReturnType<typeof dependency_1.IndexedReceipt.prototype.toObject>[];\n        storages?: ReturnType<typeof dependency_1.IndexedStorage.prototype.toObject>[];\n        transactions?: ReturnType<typeof dependency_1.IndexedTransaction.prototype.toObject>[];\n        custom_input?: ReturnType<typeof dependency_1.CustomInput.prototype.toObject>;\n    }): ProveRequest {\n        const message = new ProveRequest({});\n        if (data.receipts != null) {\n            message.receipts = data.receipts.map(item => dependency_1.IndexedReceipt.fromObject(item));\n        }\n        if (data.storages != null) {\n            message.storages = data.storages.map(item => dependency_1.IndexedStorage.fromObject(item));\n        }\n        if (data.transactions != null) {\n            message.transactions = data.transactions.map(item => dependency_1.IndexedTransaction.fromObject(item));\n        }\n        if (data.custom_input != null) {\n            message.custom_input = dependency_1.CustomInput.fromObject(data.custom_input);\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            receipts?: ReturnType<typeof dependency_1.IndexedReceipt.prototype.toObject>[];\n            storages?: ReturnType<typeof dependency_1.IndexedStorage.prototype.toObject>[];\n            transactions?: ReturnType<typeof dependency_1.IndexedTransaction.prototype.toObject>[];\n            custom_input?: ReturnType<typeof dependency_1.CustomInput.prototype.toObject>;\n        } = {};\n        if (this.receipts != null) {\n            data.receipts = this.receipts.map((item: dependency_1.IndexedReceipt) => item.toObject());\n        }\n        if (this.storages != null) {\n            data.storages = this.storages.map((item: dependency_1.IndexedStorage) => item.toObject());\n        }\n        if (this.transactions != null) {\n            data.transactions = this.transactions.map((item: dependency_1.IndexedTransaction) => item.toObject());\n        }\n        if (this.custom_input != null) {\n            data.custom_input = this.custom_input.toObject();\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.receipts.length)\n            writer.writeRepeatedMessage(1, this.receipts, (item: dependency_1.IndexedReceipt) => item.serialize(writer));\n        if (this.storages.length)\n            writer.writeRepeatedMessage(2, this.storages, (item: dependency_1.IndexedStorage) => item.serialize(writer));\n        if (this.transactions.length)\n            writer.writeRepeatedMessage(3, this.transactions, (item: dependency_1.IndexedTransaction) => item.serialize(writer));\n        if (this.has_custom_input)\n            writer.writeMessage(4, this.custom_input, () => this.custom_input.serialize(writer));\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProveRequest {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProveRequest();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    reader.readMessage(message.receipts, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.IndexedReceipt.deserialize(reader), dependency_1.IndexedReceipt));\n                    break;\n                case 2:\n                    reader.readMessage(message.storages, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.IndexedStorage.deserialize(reader), dependency_1.IndexedStorage));\n                    break;\n                case 3:\n                    reader.readMessage(message.transactions, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_1.IndexedTransaction.deserialize(reader), dependency_1.IndexedTransaction));\n                    break;\n                case 4:\n                    reader.readMessage(message.custom_input, () => message.custom_input = dependency_1.CustomInput.deserialize(reader));\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): ProveRequest {\n        return ProveRequest.deserialize(bytes);\n    }\n}\nexport class ProveResponse extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        err?: Err;\n        proof?: string;\n        circuit_info?: dependency_2.AppCircuitInfo;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"err\" in data && data.err != undefined) {\n                this.err = data.err;\n            }\n            if (\"proof\" in data && data.proof != undefined) {\n                this.proof = data.proof;\n            }\n            if (\"circuit_info\" in data && data.circuit_info != undefined) {\n                this.circuit_info = data.circuit_info;\n            }\n        }\n    }\n    get err() {\n        return pb_1.Message.getWrapperField(this, Err, 1) as Err;\n    }\n    set err(value: Err) {\n        pb_1.Message.setWrapperField(this, 1, value);\n    }\n    get has_err() {\n        return pb_1.Message.getField(this, 1) != null;\n    }\n    get proof() {\n        return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n    }\n    set proof(value: string) {\n        pb_1.Message.setField(this, 2, value);\n    }\n    get circuit_info() {\n        return pb_1.Message.getWrapperField(this, dependency_2.AppCircuitInfo, 3) as dependency_2.AppCircuitInfo;\n    }\n    set circuit_info(value: dependency_2.AppCircuitInfo) {\n        pb_1.Message.setWrapperField(this, 3, value);\n    }\n    get has_circuit_info() {\n        return pb_1.Message.getField(this, 3) != null;\n    }\n    static fromObject(data: {\n        err?: ReturnType<typeof Err.prototype.toObject>;\n        proof?: string;\n        circuit_info?: ReturnType<typeof dependency_2.AppCircuitInfo.prototype.toObject>;\n    }): ProveResponse {\n        const message = new ProveResponse({});\n        if (data.err != null) {\n            message.err = Err.fromObject(data.err);\n        }\n        if (data.proof != null) {\n            message.proof = data.proof;\n        }\n        if (data.circuit_info != null) {\n            message.circuit_info = dependency_2.AppCircuitInfo.fromObject(data.circuit_info);\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            err?: ReturnType<typeof Err.prototype.toObject>;\n            proof?: string;\n            circuit_info?: ReturnType<typeof dependency_2.AppCircuitInfo.prototype.toObject>;\n        } = {};\n        if (this.err != null) {\n            data.err = this.err.toObject();\n        }\n        if (this.proof != null) {\n            data.proof = this.proof;\n        }\n        if (this.circuit_info != null) {\n            data.circuit_info = this.circuit_info.toObject();\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.has_err)\n            writer.writeMessage(1, this.err, () => this.err.serialize(writer));\n        if (this.proof.length)\n            writer.writeString(2, this.proof);\n        if (this.has_circuit_info)\n            writer.writeMessage(3, this.circuit_info, () => this.circuit_info.serialize(writer));\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProveResponse {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProveResponse();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    reader.readMessage(message.err, () => message.err = Err.deserialize(reader));\n                    break;\n                case 2:\n                    message.proof = reader.readString();\n                    break;\n                case 3:\n                    reader.readMessage(message.circuit_info, () => message.circuit_info = dependency_2.AppCircuitInfo.deserialize(reader));\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): ProveResponse {\n        return ProveResponse.deserialize(bytes);\n    }\n}\nexport class ProveAsyncResponse extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        err?: Err;\n        proof_id?: string;\n        circuit_info?: dependency_2.AppCircuitInfo;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"err\" in data && data.err != undefined) {\n                this.err = data.err;\n            }\n            if (\"proof_id\" in data && data.proof_id != undefined) {\n                this.proof_id = data.proof_id;\n            }\n            if (\"circuit_info\" in data && data.circuit_info != undefined) {\n                this.circuit_info = data.circuit_info;\n            }\n        }\n    }\n    get err() {\n        return pb_1.Message.getWrapperField(this, Err, 1) as Err;\n    }\n    set err(value: Err) {\n        pb_1.Message.setWrapperField(this, 1, value);\n    }\n    get has_err() {\n        return pb_1.Message.getField(this, 1) != null;\n    }\n    get proof_id() {\n        return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n    }\n    set proof_id(value: string) {\n        pb_1.Message.setField(this, 2, value);\n    }\n    get circuit_info() {\n        return pb_1.Message.getWrapperField(this, dependency_2.AppCircuitInfo, 3) as dependency_2.AppCircuitInfo;\n    }\n    set circuit_info(value: dependency_2.AppCircuitInfo) {\n        pb_1.Message.setWrapperField(this, 3, value);\n    }\n    get has_circuit_info() {\n        return pb_1.Message.getField(this, 3) != null;\n    }\n    static fromObject(data: {\n        err?: ReturnType<typeof Err.prototype.toObject>;\n        proof_id?: string;\n        circuit_info?: ReturnType<typeof dependency_2.AppCircuitInfo.prototype.toObject>;\n    }): ProveAsyncResponse {\n        const message = new ProveAsyncResponse({});\n        if (data.err != null) {\n            message.err = Err.fromObject(data.err);\n        }\n        if (data.proof_id != null) {\n            message.proof_id = data.proof_id;\n        }\n        if (data.circuit_info != null) {\n            message.circuit_info = dependency_2.AppCircuitInfo.fromObject(data.circuit_info);\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            err?: ReturnType<typeof Err.prototype.toObject>;\n            proof_id?: string;\n            circuit_info?: ReturnType<typeof dependency_2.AppCircuitInfo.prototype.toObject>;\n        } = {};\n        if (this.err != null) {\n            data.err = this.err.toObject();\n        }\n        if (this.proof_id != null) {\n            data.proof_id = this.proof_id;\n        }\n        if (this.circuit_info != null) {\n            data.circuit_info = this.circuit_info.toObject();\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.has_err)\n            writer.writeMessage(1, this.err, () => this.err.serialize(writer));\n        if (this.proof_id.length)\n            writer.writeString(2, this.proof_id);\n        if (this.has_circuit_info)\n            writer.writeMessage(3, this.circuit_info, () => this.circuit_info.serialize(writer));\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProveAsyncResponse {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProveAsyncResponse();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    reader.readMessage(message.err, () => message.err = Err.deserialize(reader));\n                    break;\n                case 2:\n                    message.proof_id = reader.readString();\n                    break;\n                case 3:\n                    reader.readMessage(message.circuit_info, () => message.circuit_info = dependency_2.AppCircuitInfo.deserialize(reader));\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): ProveAsyncResponse {\n        return ProveAsyncResponse.deserialize(bytes);\n    }\n}\nexport class GetProofRequest extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        proof_id?: string;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"proof_id\" in data && data.proof_id != undefined) {\n                this.proof_id = data.proof_id;\n            }\n        }\n    }\n    get proof_id() {\n        return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n    }\n    set proof_id(value: string) {\n        pb_1.Message.setField(this, 1, value);\n    }\n    static fromObject(data: {\n        proof_id?: string;\n    }): GetProofRequest {\n        const message = new GetProofRequest({});\n        if (data.proof_id != null) {\n            message.proof_id = data.proof_id;\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            proof_id?: string;\n        } = {};\n        if (this.proof_id != null) {\n            data.proof_id = this.proof_id;\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.proof_id.length)\n            writer.writeString(1, this.proof_id);\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetProofRequest {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetProofRequest();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    message.proof_id = reader.readString();\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): GetProofRequest {\n        return GetProofRequest.deserialize(bytes);\n    }\n}\nexport class GetProofResponse extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        err?: Err;\n        proof?: string;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"err\" in data && data.err != undefined) {\n                this.err = data.err;\n            }\n            if (\"proof\" in data && data.proof != undefined) {\n                this.proof = data.proof;\n            }\n        }\n    }\n    get err() {\n        return pb_1.Message.getWrapperField(this, Err, 1) as Err;\n    }\n    set err(value: Err) {\n        pb_1.Message.setWrapperField(this, 1, value);\n    }\n    get has_err() {\n        return pb_1.Message.getField(this, 1) != null;\n    }\n    get proof() {\n        return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n    }\n    set proof(value: string) {\n        pb_1.Message.setField(this, 2, value);\n    }\n    static fromObject(data: {\n        err?: ReturnType<typeof Err.prototype.toObject>;\n        proof?: string;\n    }): GetProofResponse {\n        const message = new GetProofResponse({});\n        if (data.err != null) {\n            message.err = Err.fromObject(data.err);\n        }\n        if (data.proof != null) {\n            message.proof = data.proof;\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            err?: ReturnType<typeof Err.prototype.toObject>;\n            proof?: string;\n        } = {};\n        if (this.err != null) {\n            data.err = this.err.toObject();\n        }\n        if (this.proof != null) {\n            data.proof = this.proof;\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.has_err)\n            writer.writeMessage(1, this.err, () => this.err.serialize(writer));\n        if (this.proof.length)\n            writer.writeString(2, this.proof);\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetProofResponse {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetProofResponse();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    reader.readMessage(message.err, () => message.err = Err.deserialize(reader));\n                    break;\n                case 2:\n                    message.proof = reader.readString();\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): GetProofResponse {\n        return GetProofResponse.deserialize(bytes);\n    }\n}\nexport class Err extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        code?: ErrCode;\n        msg?: string;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"code\" in data && data.code != undefined) {\n                this.code = data.code;\n            }\n            if (\"msg\" in data && data.msg != undefined) {\n                this.msg = data.msg;\n            }\n        }\n    }\n    get code() {\n        return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.ERROR_UNDEFINED) as ErrCode;\n    }\n    set code(value: ErrCode) {\n        pb_1.Message.setField(this, 1, value);\n    }\n    get msg() {\n        return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n    }\n    set msg(value: string) {\n        pb_1.Message.setField(this, 2, value);\n    }\n    static fromObject(data: {\n        code?: ErrCode;\n        msg?: string;\n    }): Err {\n        const message = new Err({});\n        if (data.code != null) {\n            message.code = data.code;\n        }\n        if (data.msg != null) {\n            message.msg = data.msg;\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            code?: ErrCode;\n            msg?: string;\n        } = {};\n        if (this.code != null) {\n            data.code = this.code;\n        }\n        if (this.msg != null) {\n            data.msg = this.msg;\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.code != ErrCode.ERROR_UNDEFINED)\n            writer.writeEnum(1, this.code);\n        if (this.msg.length)\n            writer.writeString(2, this.msg);\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Err {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Err();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    message.code = reader.readEnum();\n                    break;\n                case 2:\n                    message.msg = reader.readString();\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): Err {\n        return Err.deserialize(bytes);\n    }\n}\ninterface GrpcUnaryServiceInterface<P, R> {\n    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;\n    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;\n    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;\n    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;\n}\ninterface GrpcStreamServiceInterface<P, R> {\n    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;\n    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;\n}\ninterface GrpWritableServiceInterface<P, R> {\n    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;\n    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;\n    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;\n    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;\n}\ninterface GrpcChunkServiceInterface<P, R> {\n    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;\n    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;\n}\ninterface GrpcPromiseServiceInterface<P, R> {\n    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;\n    (message: P, options?: grpc_1.CallOptions): Promise<R>;\n}\nexport abstract class UnimplementedProverService {\n    static definition = {\n        Prove: {\n            path: \"/sdk.Prover/Prove\",\n            requestStream: false,\n            responseStream: false,\n            requestSerialize: (message: ProveRequest) => Buffer.from(message.serialize()),\n            requestDeserialize: (bytes: Buffer) => ProveRequest.deserialize(new Uint8Array(bytes)),\n            responseSerialize: (message: ProveResponse) => Buffer.from(message.serialize()),\n            responseDeserialize: (bytes: Buffer) => ProveResponse.deserialize(new Uint8Array(bytes))\n        },\n        ProveAsync: {\n            path: \"/sdk.Prover/ProveAsync\",\n            requestStream: false,\n            responseStream: false,\n            requestSerialize: (message: ProveRequest) => Buffer.from(message.serialize()),\n            requestDeserialize: (bytes: Buffer) => ProveRequest.deserialize(new Uint8Array(bytes)),\n            responseSerialize: (message: ProveAsyncResponse) => Buffer.from(message.serialize()),\n            responseDeserialize: (bytes: Buffer) => ProveAsyncResponse.deserialize(new Uint8Array(bytes))\n        },\n        GetProof: {\n            path: \"/sdk.Prover/GetProof\",\n            requestStream: false,\n            responseStream: false,\n            requestSerialize: (message: GetProofRequest) => Buffer.from(message.serialize()),\n            requestDeserialize: (bytes: Buffer) => GetProofRequest.deserialize(new Uint8Array(bytes)),\n            responseSerialize: (message: GetProofResponse) => Buffer.from(message.serialize()),\n            responseDeserialize: (bytes: Buffer) => GetProofResponse.deserialize(new Uint8Array(bytes))\n        }\n    };\n    [method: string]: grpc_1.UntypedHandleCall;\n    abstract Prove(call: grpc_1.ServerUnaryCall<ProveRequest, ProveResponse>, callback: grpc_1.sendUnaryData<ProveResponse>): void;\n    abstract ProveAsync(call: grpc_1.ServerUnaryCall<ProveRequest, ProveAsyncResponse>, callback: grpc_1.sendUnaryData<ProveAsyncResponse>): void;\n    abstract GetProof(call: grpc_1.ServerUnaryCall<GetProofRequest, GetProofResponse>, callback: grpc_1.sendUnaryData<GetProofResponse>): void;\n}\nexport class ProverClient extends grpc_1.makeGenericClientConstructor(UnimplementedProverService.definition, \"Prover\", {}) {\n    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {\n        super(address, credentials, options);\n    }\n    Prove: GrpcPromiseServiceInterface<ProveRequest, ProveResponse> = (message: ProveRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<ProveResponse> => { if (!metadata) {\n        metadata = new grpc_1.Metadata;\n    } if (!options) {\n        options = {};\n    } return new Promise((resolve, reject) => super.Prove(message, metadata, options, (error: grpc_1.ServiceError, response: ProveResponse) => {\n        if (error) {\n            reject(error);\n        }\n        else {\n            resolve(response);\n        }\n    })); };\n    ProveAsync: GrpcPromiseServiceInterface<ProveRequest, ProveAsyncResponse> = (message: ProveRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<ProveAsyncResponse> => { if (!metadata) {\n        metadata = new grpc_1.Metadata;\n    } if (!options) {\n        options = {};\n    } return new Promise((resolve, reject) => super.ProveAsync(message, metadata, options, (error: grpc_1.ServiceError, response: ProveAsyncResponse) => {\n        if (error) {\n            reject(error);\n        }\n        else {\n            resolve(response);\n        }\n    })); };\n    GetProof: GrpcPromiseServiceInterface<GetProofRequest, GetProofResponse> = (message: GetProofRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<GetProofResponse> => { if (!metadata) {\n        metadata = new grpc_1.Metadata;\n    } if (!options) {\n        options = {};\n    } return new Promise((resolve, reject) => super.GetProof(message, metadata, options, (error: grpc_1.ServiceError, response: GetProofResponse) => {\n        if (error) {\n            reject(error);\n        }\n        else {\n            resolve(response);\n        }\n    })); };\n}\n","import { credentials } from '@grpc/grpc-js';\nimport {\n    GatewayClient,\n    GetQueryStatusRequest,\n    PrepareQueryRequest,\n    QueryStatus,\n    SubmitAppCircuitProofRequest,\n    type GetQueryStatusResponse,\n    type PrepareQueryResponse,\n    type SubmitAppCircuitProofResponse,\n} from '../proto/brevis/gateway';\nimport { LogExtractInfo, ReceiptInfo, StorageQueryInfo, TransactionInfo } from '../proto/brevis/types';\nimport { AppCircuitInfo } from '../proto/common/circuit_data';\nimport { type ProveResponse } from '../proto/sdk/prover';\nimport { type ReceiptData, type StorageData, type TransactionData } from './../proto/sdk/types';\nimport { type ProofRequest } from './request';\n\nexport interface SubmitResponse {\n    // the id of the request. use this id when calling BrevisRequest.sendRequest\n    // note that brevisId is not the same as the proof_id you get from calling your prover service.\n    brevisId: string;\n\n    // amount of the fee to pay to BrevisRequest, in wei\n    fee: string;\n}\n\nexport interface FinalResult {\n    // the request id\n    brevisId: string;\n\n    // the tx where the final proof is submitted on-chain and the app contract is called\n    tx?: string;\n\n    // whether the final proof submission tx succeeded\n    success: boolean;\n}\n\nexport class Brevis {\n    private readonly client: GatewayClient;\n\n    public constructor(url: string) {\n        const cred = credentials.createSsl();\n        this.client = new GatewayClient(url, cred);\n    }\n\n    public async submit(\n        request: ProofRequest,\n        proof: ProveResponse,\n        srcChainId: number,\n        dstChainId: number,\n    ): Promise<SubmitResponse> {\n        const res1 = await this._prepareQuery(request, proof.circuit_info, srcChainId, dstChainId);\n        if (res1.has_err) {\n            throw new Error(`failed to submit ${res1.err.msg}`);\n        }\n        console.log('brevis request id', res1.query_hash);\n        const res2 = await this._submitProof(res1.query_hash, dstChainId, proof.proof);\n        if (res2.has_err) {\n            throw new Error(`failed to submit ${res2.err.msg}`);\n        }\n\n        return {\n            brevisId: res1.query_hash,\n            fee: res1.fee,\n        };\n    }\n\n    public async prepareQuery(\n        request: ProofRequest,\n        circuitInfo: AppCircuitInfo,\n        srcChainId: number,\n        dstChainId: number,\n    ): Promise<PrepareQueryResponse> {\n        return this._prepareQuery(request, circuitInfo, srcChainId, dstChainId);\n    }\n\n    public async submitProof(id: string, dstChainId: number, proof: string) {\n        await this._submitProof(id, dstChainId, proof);\n    }\n\n    // wait untill the final proof is submitted on-chain and the app contract is called\n    public async wait(id: string, dstChainId: number): Promise<FinalResult> {\n        const interval = 10000;\n        const count = 50;\n\n        for (let i = 0; i < count; i++) {\n            const res = await this.getQueryStatus(id, dstChainId);\n            switch (res.status) {\n                case QueryStatus.QS_COMPLETE:\n                    console.log(`request ${id} success, tx ${res.tx_hash}`);\n                    return { brevisId: id, tx: res.tx_hash, success: true };\n                case QueryStatus.QS_FAILED:\n                    console.log(`request ${id} failed`);\n                    return { brevisId: id, success: false };\n                case QueryStatus.QS_TO_BE_PAID:\n                    console.log(\n                        `query ${id} waiting for payment. call BrevisRequest.sendRequest to initiate the payment`,\n                    );\n                    break;\n                default:\n                    console.log(`query ${id} waiting for final tx`);\n            }\n            await new Promise(resolve => setTimeout(resolve, interval));\n        }\n        console.log(`query ${id} timed out after ${interval * count} seconds`);\n        return { brevisId: id, success: false };\n    }\n\n    private async _prepareQuery(\n        request: ProofRequest,\n        circuitInfo: AppCircuitInfo,\n        srcChainId: number,\n        dstChainId: number,\n    ): Promise<PrepareQueryResponse> {\n        const req = new PrepareQueryRequest({\n            chain_id: srcChainId,\n            target_chain_id: dstChainId,\n            receipt_infos: request.getReceipts().map(r => this.buildReceiptInfo(r.data)),\n            storage_query_infos: request.getStorages().map(s => this.buildStorageInfo(s.data)),\n            transaction_infos: request.getTransactions().map(t => this.buildTransactionInfo(t.data)),\n            use_app_circuit_info: true,\n            app_circuit_info: circuitInfo,\n        });\n        const res = await this.client.PrepareQuery(req);\n        return res;\n    }\n\n    private async _submitProof(id: string, dstChainId: number, proof: string): Promise<SubmitAppCircuitProofResponse> {\n        const req = new SubmitAppCircuitProofRequest({\n            query_hash: id,\n            target_chain_id: dstChainId,\n            proof,\n        });\n        const res = await this.client.SubmitAppCircuitProof(req);\n        if (res.has_err) {\n            throw new Error(`error while submitting proof to brevis: ${res.err.msg}`);\n        }\n        return res;\n    }\n\n    private async getQueryStatus(id: string, dstChainId: number): Promise<GetQueryStatusResponse> {\n        const req = new GetQueryStatusRequest({ query_hash: id, target_chain_id: dstChainId });\n        const res = await this.client.GetQueryStatus(req);\n        if (res.has_err) {\n            throw new Error(`error while waiting for final result: ${res.err.msg}`);\n        }\n        return res;\n    }\n\n    private buildReceiptInfo(data: ReceiptData): ReceiptInfo {\n        return new ReceiptInfo({\n            blk_num: data.block_num,\n            transaction_hash: data.tx_hash,\n            log_extract_infos: data.fields.map(f => {\n                return new LogExtractInfo({\n                    contract_address: f.contract,\n                    log_index: f.log_index,\n                    log_topic0: f.event_id,\n                    value_from_topic: f.is_topic,\n                    value_index: f.field_index,\n                    value: f.value,\n                });\n            }),\n        });\n    }\n\n    private buildStorageInfo(data: StorageData): StorageQueryInfo {\n        return new StorageQueryInfo({\n            account: data.address,\n            storage_keys: [data.slot],\n            blk_num: data.block_num,\n        });\n    }\n\n    private buildTransactionInfo(data: TransactionData): TransactionInfo {\n        return new TransactionInfo({ transaction_hash: data.hash });\n    }\n}\n","/**\n * Generated by the protoc-gen-ts.  DO NOT EDIT!\n * compiler version: 4.23.4\n * source: brevis/types.proto\n * git: https://github.com/thesayyn/protoc-gen-ts */\nimport * as pb_1 from \"google-protobuf\";\nexport class ReceiptInfo extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        transaction_hash?: string;\n        log_extract_infos?: LogExtractInfo[];\n        blk_num?: number;\n        receipt_index?: number;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"transaction_hash\" in data && data.transaction_hash != undefined) {\n                this.transaction_hash = data.transaction_hash;\n            }\n            if (\"log_extract_infos\" in data && data.log_extract_infos != undefined) {\n                this.log_extract_infos = data.log_extract_infos;\n            }\n            if (\"blk_num\" in data && data.blk_num != undefined) {\n                this.blk_num = data.blk_num;\n            }\n            if (\"receipt_index\" in data && data.receipt_index != undefined) {\n                this.receipt_index = data.receipt_index;\n            }\n        }\n    }\n    get transaction_hash() {\n        return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n    }\n    set transaction_hash(value: string) {\n        pb_1.Message.setField(this, 1, value);\n    }\n    get log_extract_infos() {\n        return pb_1.Message.getRepeatedWrapperField(this, LogExtractInfo, 2) as LogExtractInfo[];\n    }\n    set log_extract_infos(value: LogExtractInfo[]) {\n        pb_1.Message.setRepeatedWrapperField(this, 2, value);\n    }\n    get blk_num() {\n        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n    }\n    set blk_num(value: number) {\n        pb_1.Message.setField(this, 3, value);\n    }\n    get receipt_index() {\n        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n    }\n    set receipt_index(value: number) {\n        pb_1.Message.setField(this, 4, value);\n    }\n    static fromObject(data: {\n        transaction_hash?: string;\n        log_extract_infos?: ReturnType<typeof LogExtractInfo.prototype.toObject>[];\n        blk_num?: number;\n        receipt_index?: number;\n    }): ReceiptInfo {\n        const message = new ReceiptInfo({});\n        if (data.transaction_hash != null) {\n            message.transaction_hash = data.transaction_hash;\n        }\n        if (data.log_extract_infos != null) {\n            message.log_extract_infos = data.log_extract_infos.map(item => LogExtractInfo.fromObject(item));\n        }\n        if (data.blk_num != null) {\n            message.blk_num = data.blk_num;\n        }\n        if (data.receipt_index != null) {\n            message.receipt_index = data.receipt_index;\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            transaction_hash?: string;\n            log_extract_infos?: ReturnType<typeof LogExtractInfo.prototype.toObject>[];\n            blk_num?: number;\n            receipt_index?: number;\n        } = {};\n        if (this.transaction_hash != null) {\n            data.transaction_hash = this.transaction_hash;\n        }\n        if (this.log_extract_infos != null) {\n            data.log_extract_infos = this.log_extract_infos.map((item: LogExtractInfo) => item.toObject());\n        }\n        if (this.blk_num != null) {\n            data.blk_num = this.blk_num;\n        }\n        if (this.receipt_index != null) {\n            data.receipt_index = this.receipt_index;\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.transaction_hash.length)\n            writer.writeString(1, this.transaction_hash);\n        if (this.log_extract_infos.length)\n            writer.writeRepeatedMessage(2, this.log_extract_infos, (item: LogExtractInfo) => item.serialize(writer));\n        if (this.blk_num != 0)\n            writer.writeUint64(3, this.blk_num);\n        if (this.receipt_index != 0)\n            writer.writeUint64(4, this.receipt_index);\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReceiptInfo {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReceiptInfo();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    message.transaction_hash = reader.readString();\n                    break;\n                case 2:\n                    reader.readMessage(message.log_extract_infos, () => pb_1.Message.addToRepeatedWrapperField(message, 2, LogExtractInfo.deserialize(reader), LogExtractInfo));\n                    break;\n                case 3:\n                    message.blk_num = reader.readUint64();\n                    break;\n                case 4:\n                    message.receipt_index = reader.readUint64();\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): ReceiptInfo {\n        return ReceiptInfo.deserialize(bytes);\n    }\n}\nexport class LogExtractInfo extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        contract_address?: string;\n        log_index?: number;\n        log_topic0?: string;\n        value_from_topic?: boolean;\n        value_index?: number;\n        value?: string;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"contract_address\" in data && data.contract_address != undefined) {\n                this.contract_address = data.contract_address;\n            }\n            if (\"log_index\" in data && data.log_index != undefined) {\n                this.log_index = data.log_index;\n            }\n            if (\"log_topic0\" in data && data.log_topic0 != undefined) {\n                this.log_topic0 = data.log_topic0;\n            }\n            if (\"value_from_topic\" in data && data.value_from_topic != undefined) {\n                this.value_from_topic = data.value_from_topic;\n            }\n            if (\"value_index\" in data && data.value_index != undefined) {\n                this.value_index = data.value_index;\n            }\n            if (\"value\" in data && data.value != undefined) {\n                this.value = data.value;\n            }\n        }\n    }\n    get contract_address() {\n        return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n    }\n    set contract_address(value: string) {\n        pb_1.Message.setField(this, 1, value);\n    }\n    get log_index() {\n        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n    }\n    set log_index(value: number) {\n        pb_1.Message.setField(this, 2, value);\n    }\n    get log_topic0() {\n        return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n    }\n    set log_topic0(value: string) {\n        pb_1.Message.setField(this, 3, value);\n    }\n    get value_from_topic() {\n        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;\n    }\n    set value_from_topic(value: boolean) {\n        pb_1.Message.setField(this, 4, value);\n    }\n    get value_index() {\n        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;\n    }\n    set value_index(value: number) {\n        pb_1.Message.setField(this, 5, value);\n    }\n    get value() {\n        return pb_1.Message.getFieldWithDefault(this, 6, \"\") as string;\n    }\n    set value(value: string) {\n        pb_1.Message.setField(this, 6, value);\n    }\n    static fromObject(data: {\n        contract_address?: string;\n        log_index?: number;\n        log_topic0?: string;\n        value_from_topic?: boolean;\n        value_index?: number;\n        value?: string;\n    }): LogExtractInfo {\n        const message = new LogExtractInfo({});\n        if (data.contract_address != null) {\n            message.contract_address = data.contract_address;\n        }\n        if (data.log_index != null) {\n            message.log_index = data.log_index;\n        }\n        if (data.log_topic0 != null) {\n            message.log_topic0 = data.log_topic0;\n        }\n        if (data.value_from_topic != null) {\n            message.value_from_topic = data.value_from_topic;\n        }\n        if (data.value_index != null) {\n            message.value_index = data.value_index;\n        }\n        if (data.value != null) {\n            message.value = data.value;\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            contract_address?: string;\n            log_index?: number;\n            log_topic0?: string;\n            value_from_topic?: boolean;\n            value_index?: number;\n            value?: string;\n        } = {};\n        if (this.contract_address != null) {\n            data.contract_address = this.contract_address;\n        }\n        if (this.log_index != null) {\n            data.log_index = this.log_index;\n        }\n        if (this.log_topic0 != null) {\n            data.log_topic0 = this.log_topic0;\n        }\n        if (this.value_from_topic != null) {\n            data.value_from_topic = this.value_from_topic;\n        }\n        if (this.value_index != null) {\n            data.value_index = this.value_index;\n        }\n        if (this.value != null) {\n            data.value = this.value;\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.contract_address.length)\n            writer.writeString(1, this.contract_address);\n        if (this.log_index != 0)\n            writer.writeUint64(2, this.log_index);\n        if (this.log_topic0.length)\n            writer.writeString(3, this.log_topic0);\n        if (this.value_from_topic != false)\n            writer.writeBool(4, this.value_from_topic);\n        if (this.value_index != 0)\n            writer.writeUint64(5, this.value_index);\n        if (this.value.length)\n            writer.writeString(6, this.value);\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LogExtractInfo {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LogExtractInfo();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    message.contract_address = reader.readString();\n                    break;\n                case 2:\n                    message.log_index = reader.readUint64();\n                    break;\n                case 3:\n                    message.log_topic0 = reader.readString();\n                    break;\n                case 4:\n                    message.value_from_topic = reader.readBool();\n                    break;\n                case 5:\n                    message.value_index = reader.readUint64();\n                    break;\n                case 6:\n                    message.value = reader.readString();\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): LogExtractInfo {\n        return LogExtractInfo.deserialize(bytes);\n    }\n}\nexport class StorageQueryInfo extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        account?: string;\n        storage_keys?: string[];\n        blk_num?: number;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"account\" in data && data.account != undefined) {\n                this.account = data.account;\n            }\n            if (\"storage_keys\" in data && data.storage_keys != undefined) {\n                this.storage_keys = data.storage_keys;\n            }\n            if (\"blk_num\" in data && data.blk_num != undefined) {\n                this.blk_num = data.blk_num;\n            }\n        }\n    }\n    get account() {\n        return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n    }\n    set account(value: string) {\n        pb_1.Message.setField(this, 1, value);\n    }\n    get storage_keys() {\n        return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];\n    }\n    set storage_keys(value: string[]) {\n        pb_1.Message.setField(this, 2, value);\n    }\n    get blk_num() {\n        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n    }\n    set blk_num(value: number) {\n        pb_1.Message.setField(this, 3, value);\n    }\n    static fromObject(data: {\n        account?: string;\n        storage_keys?: string[];\n        blk_num?: number;\n    }): StorageQueryInfo {\n        const message = new StorageQueryInfo({});\n        if (data.account != null) {\n            message.account = data.account;\n        }\n        if (data.storage_keys != null) {\n            message.storage_keys = data.storage_keys;\n        }\n        if (data.blk_num != null) {\n            message.blk_num = data.blk_num;\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            account?: string;\n            storage_keys?: string[];\n            blk_num?: number;\n        } = {};\n        if (this.account != null) {\n            data.account = this.account;\n        }\n        if (this.storage_keys != null) {\n            data.storage_keys = this.storage_keys;\n        }\n        if (this.blk_num != null) {\n            data.blk_num = this.blk_num;\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.account.length)\n            writer.writeString(1, this.account);\n        if (this.storage_keys.length)\n            writer.writeRepeatedString(2, this.storage_keys);\n        if (this.blk_num != 0)\n            writer.writeUint64(3, this.blk_num);\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StorageQueryInfo {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StorageQueryInfo();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    message.account = reader.readString();\n                    break;\n                case 2:\n                    pb_1.Message.addToRepeatedField(message, 2, reader.readString());\n                    break;\n                case 3:\n                    message.blk_num = reader.readUint64();\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): StorageQueryInfo {\n        return StorageQueryInfo.deserialize(bytes);\n    }\n}\nexport class TransactionInfo extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        transaction_hash?: string;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"transaction_hash\" in data && data.transaction_hash != undefined) {\n                this.transaction_hash = data.transaction_hash;\n            }\n        }\n    }\n    get transaction_hash() {\n        return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n    }\n    set transaction_hash(value: string) {\n        pb_1.Message.setField(this, 1, value);\n    }\n    static fromObject(data: {\n        transaction_hash?: string;\n    }): TransactionInfo {\n        const message = new TransactionInfo({});\n        if (data.transaction_hash != null) {\n            message.transaction_hash = data.transaction_hash;\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            transaction_hash?: string;\n        } = {};\n        if (this.transaction_hash != null) {\n            data.transaction_hash = this.transaction_hash;\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.transaction_hash.length)\n            writer.writeString(1, this.transaction_hash);\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionInfo {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionInfo();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    message.transaction_hash = reader.readString();\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): TransactionInfo {\n        return TransactionInfo.deserialize(bytes);\n    }\n}\n","/**\n * Generated by the protoc-gen-ts.  DO NOT EDIT!\n * compiler version: 4.23.4\n * source: brevis/gateway.proto\n * git: https://github.com/thesayyn/protoc-gen-ts */\nimport * as dependency_1 from \"./types\";\nimport * as dependency_2 from \"./../common/circuit_data\";\nimport * as dependency_3 from \"./../google/api/annotations\";\nimport * as pb_1 from \"google-protobuf\";\nimport * as grpc_1 from \"@grpc/grpc-js\";\nexport enum ErrCode {\n    ERROR_CODE_UNDEFINED = 0,\n    ERROR_CODE_SLOT_VALUE_PROOF_GENERATION_FAILED = 1,\n    ERROR_CODE_TRANSACTION_PROOF_GENERATION_FAILED = 2\n}\nexport enum CheckStatus {\n    IN_PROGRESS = 0,\n    COMPLETE = 1\n}\nexport enum QueryStatus {\n    QS_UNKNOWN = 0,\n    QS_TO_BE_PAID = 1,\n    QS_PAID = 2,\n    QS_PROOF_READY = 3,\n    QS_COMPLETE = 4,\n    QS_FAILED = 5\n}\nexport class ErrMsg extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        code?: ErrCode;\n        msg?: string;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"code\" in data && data.code != undefined) {\n                this.code = data.code;\n            }\n            if (\"msg\" in data && data.msg != undefined) {\n                this.msg = data.msg;\n            }\n        }\n    }\n    get code() {\n        return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.ERROR_CODE_UNDEFINED) as ErrCode;\n    }\n    set code(value: ErrCode) {\n        pb_1.Message.setField(this, 1, value);\n    }\n    get msg() {\n        return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n    }\n    set msg(value: string) {\n        pb_1.Message.setField(this, 2, value);\n    }\n    static fromObject(data: {\n        code?: ErrCode;\n        msg?: string;\n    }): ErrMsg {\n        const message = new ErrMsg({});\n        if (data.code != null) {\n            message.code = data.code;\n        }\n        if (data.msg != null) {\n            message.msg = data.msg;\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            code?: ErrCode;\n            msg?: string;\n        } = {};\n        if (this.code != null) {\n            data.code = this.code;\n        }\n        if (this.msg != null) {\n            data.msg = this.msg;\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.code != ErrCode.ERROR_CODE_UNDEFINED)\n            writer.writeEnum(1, this.code);\n        if (this.msg.length)\n            writer.writeString(2, this.msg);\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ErrMsg {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ErrMsg();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    message.code = reader.readEnum();\n                    break;\n                case 2:\n                    message.msg = reader.readString();\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): ErrMsg {\n        return ErrMsg.deserialize(bytes);\n    }\n}\nexport class PrepareQueryRequest extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        chain_id?: number;\n        receipt_infos?: dependency_1.ReceiptInfo[];\n        storage_query_infos?: dependency_1.StorageQueryInfo[];\n        transaction_infos?: dependency_1.TransactionInfo[];\n        app_circuit_info?: dependency_2.AppCircuitInfo;\n        use_app_circuit_info?: boolean;\n        target_chain_id?: number;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3, 4], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"chain_id\" in data && data.chain_id != undefined) {\n                this.chain_id = data.chain_id;\n            }\n            if (\"receipt_infos\" in data && data.receipt_infos != undefined) {\n                this.receipt_infos = data.receipt_infos;\n            }\n            if (\"storage_query_infos\" in data && data.storage_query_infos != undefined) {\n                this.storage_query_infos = data.storage_query_infos;\n            }\n            if (\"transaction_infos\" in data && data.transaction_infos != undefined) {\n                this.transaction_infos = data.transaction_infos;\n            }\n            if (\"app_circuit_info\" in data && data.app_circuit_info != undefined) {\n                this.app_circuit_info = data.app_circuit_info;\n            }\n            if (\"use_app_circuit_info\" in data && data.use_app_circuit_info != undefined) {\n                this.use_app_circuit_info = data.use_app_circuit_info;\n            }\n            if (\"target_chain_id\" in data && data.target_chain_id != undefined) {\n                this.target_chain_id = data.target_chain_id;\n            }\n        }\n    }\n    get chain_id() {\n        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n    }\n    set chain_id(value: number) {\n        pb_1.Message.setField(this, 1, value);\n    }\n    get receipt_infos() {\n        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.ReceiptInfo, 2) as dependency_1.ReceiptInfo[];\n    }\n    set receipt_infos(value: dependency_1.ReceiptInfo[]) {\n        pb_1.Message.setRepeatedWrapperField(this, 2, value);\n    }\n    get storage_query_infos() {\n        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.StorageQueryInfo, 3) as dependency_1.StorageQueryInfo[];\n    }\n    set storage_query_infos(value: dependency_1.StorageQueryInfo[]) {\n        pb_1.Message.setRepeatedWrapperField(this, 3, value);\n    }\n    get transaction_infos() {\n        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.TransactionInfo, 4) as dependency_1.TransactionInfo[];\n    }\n    set transaction_infos(value: dependency_1.TransactionInfo[]) {\n        pb_1.Message.setRepeatedWrapperField(this, 4, value);\n    }\n    get app_circuit_info() {\n        return pb_1.Message.getWrapperField(this, dependency_2.AppCircuitInfo, 5) as dependency_2.AppCircuitInfo;\n    }\n    set app_circuit_info(value: dependency_2.AppCircuitInfo) {\n        pb_1.Message.setWrapperField(this, 5, value);\n    }\n    get has_app_circuit_info() {\n        return pb_1.Message.getField(this, 5) != null;\n    }\n    get use_app_circuit_info() {\n        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;\n    }\n    set use_app_circuit_info(value: boolean) {\n        pb_1.Message.setField(this, 6, value);\n    }\n    get target_chain_id() {\n        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;\n    }\n    set target_chain_id(value: number) {\n        pb_1.Message.setField(this, 7, value);\n    }\n    static fromObject(data: {\n        chain_id?: number;\n        receipt_infos?: ReturnType<typeof dependency_1.ReceiptInfo.prototype.toObject>[];\n        storage_query_infos?: ReturnType<typeof dependency_1.StorageQueryInfo.prototype.toObject>[];\n        transaction_infos?: ReturnType<typeof dependency_1.TransactionInfo.prototype.toObject>[];\n        app_circuit_info?: ReturnType<typeof dependency_2.AppCircuitInfo.prototype.toObject>;\n        use_app_circuit_info?: boolean;\n        target_chain_id?: number;\n    }): PrepareQueryRequest {\n        const message = new PrepareQueryRequest({});\n        if (data.chain_id != null) {\n            message.chain_id = data.chain_id;\n        }\n        if (data.receipt_infos != null) {\n            message.receipt_infos = data.receipt_infos.map(item => dependency_1.ReceiptInfo.fromObject(item));\n        }\n        if (data.storage_query_infos != null) {\n            message.storage_query_infos = data.storage_query_infos.map(item => dependency_1.StorageQueryInfo.fromObject(item));\n        }\n        if (data.transaction_infos != null) {\n            message.transaction_infos = data.transaction_infos.map(item => dependency_1.TransactionInfo.fromObject(item));\n        }\n        if (data.app_circuit_info != null) {\n            message.app_circuit_info = dependency_2.AppCircuitInfo.fromObject(data.app_circuit_info);\n        }\n        if (data.use_app_circuit_info != null) {\n            message.use_app_circuit_info = data.use_app_circuit_info;\n        }\n        if (data.target_chain_id != null) {\n            message.target_chain_id = data.target_chain_id;\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            chain_id?: number;\n            receipt_infos?: ReturnType<typeof dependency_1.ReceiptInfo.prototype.toObject>[];\n            storage_query_infos?: ReturnType<typeof dependency_1.StorageQueryInfo.prototype.toObject>[];\n            transaction_infos?: ReturnType<typeof dependency_1.TransactionInfo.prototype.toObject>[];\n            app_circuit_info?: ReturnType<typeof dependency_2.AppCircuitInfo.prototype.toObject>;\n            use_app_circuit_info?: boolean;\n            target_chain_id?: number;\n        } = {};\n        if (this.chain_id != null) {\n            data.chain_id = this.chain_id;\n        }\n        if (this.receipt_infos != null) {\n            data.receipt_infos = this.receipt_infos.map((item: dependency_1.ReceiptInfo) => item.toObject());\n        }\n        if (this.storage_query_infos != null) {\n            data.storage_query_infos = this.storage_query_infos.map((item: dependency_1.StorageQueryInfo) => item.toObject());\n        }\n        if (this.transaction_infos != null) {\n            data.transaction_infos = this.transaction_infos.map((item: dependency_1.TransactionInfo) => item.toObject());\n        }\n        if (this.app_circuit_info != null) {\n            data.app_circuit_info = this.app_circuit_info.toObject();\n        }\n        if (this.use_app_circuit_info != null) {\n            data.use_app_circuit_info = this.use_app_circuit_info;\n        }\n        if (this.target_chain_id != null) {\n            data.target_chain_id = this.target_chain_id;\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.chain_id != 0)\n            writer.writeUint64(1, this.chain_id);\n        if (this.receipt_infos.length)\n            writer.writeRepeatedMessage(2, this.receipt_infos, (item: dependency_1.ReceiptInfo) => item.serialize(writer));\n        if (this.storage_query_infos.length)\n            writer.writeRepeatedMessage(3, this.storage_query_infos, (item: dependency_1.StorageQueryInfo) => item.serialize(writer));\n        if (this.transaction_infos.length)\n            writer.writeRepeatedMessage(4, this.transaction_infos, (item: dependency_1.TransactionInfo) => item.serialize(writer));\n        if (this.has_app_circuit_info)\n            writer.writeMessage(5, this.app_circuit_info, () => this.app_circuit_info.serialize(writer));\n        if (this.use_app_circuit_info != false)\n            writer.writeBool(6, this.use_app_circuit_info);\n        if (this.target_chain_id != 0)\n            writer.writeUint64(7, this.target_chain_id);\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrepareQueryRequest {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrepareQueryRequest();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    message.chain_id = reader.readUint64();\n                    break;\n                case 2:\n                    reader.readMessage(message.receipt_infos, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.ReceiptInfo.deserialize(reader), dependency_1.ReceiptInfo));\n                    break;\n                case 3:\n                    reader.readMessage(message.storage_query_infos, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_1.StorageQueryInfo.deserialize(reader), dependency_1.StorageQueryInfo));\n                    break;\n                case 4:\n                    reader.readMessage(message.transaction_infos, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_1.TransactionInfo.deserialize(reader), dependency_1.TransactionInfo));\n                    break;\n                case 5:\n                    reader.readMessage(message.app_circuit_info, () => message.app_circuit_info = dependency_2.AppCircuitInfo.deserialize(reader));\n                    break;\n                case 6:\n                    message.use_app_circuit_info = reader.readBool();\n                    break;\n                case 7:\n                    message.target_chain_id = reader.readUint64();\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): PrepareQueryRequest {\n        return PrepareQueryRequest.deserialize(bytes);\n    }\n}\nexport class PrepareQueryResponse extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        err?: ErrMsg;\n        query_hash?: string;\n        fee?: string;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"err\" in data && data.err != undefined) {\n                this.err = data.err;\n            }\n            if (\"query_hash\" in data && data.query_hash != undefined) {\n                this.query_hash = data.query_hash;\n            }\n            if (\"fee\" in data && data.fee != undefined) {\n                this.fee = data.fee;\n            }\n        }\n    }\n    get err() {\n        return pb_1.Message.getWrapperField(this, ErrMsg, 1) as ErrMsg;\n    }\n    set err(value: ErrMsg) {\n        pb_1.Message.setWrapperField(this, 1, value);\n    }\n    get has_err() {\n        return pb_1.Message.getField(this, 1) != null;\n    }\n    get query_hash() {\n        return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n    }\n    set query_hash(value: string) {\n        pb_1.Message.setField(this, 2, value);\n    }\n    get fee() {\n        return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n    }\n    set fee(value: string) {\n        pb_1.Message.setField(this, 3, value);\n    }\n    static fromObject(data: {\n        err?: ReturnType<typeof ErrMsg.prototype.toObject>;\n        query_hash?: string;\n        fee?: string;\n    }): PrepareQueryResponse {\n        const message = new PrepareQueryResponse({});\n        if (data.err != null) {\n            message.err = ErrMsg.fromObject(data.err);\n        }\n        if (data.query_hash != null) {\n            message.query_hash = data.query_hash;\n        }\n        if (data.fee != null) {\n            message.fee = data.fee;\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            err?: ReturnType<typeof ErrMsg.prototype.toObject>;\n            query_hash?: string;\n            fee?: string;\n        } = {};\n        if (this.err != null) {\n            data.err = this.err.toObject();\n        }\n        if (this.query_hash != null) {\n            data.query_hash = this.query_hash;\n        }\n        if (this.fee != null) {\n            data.fee = this.fee;\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.has_err)\n            writer.writeMessage(1, this.err, () => this.err.serialize(writer));\n        if (this.query_hash.length)\n            writer.writeString(2, this.query_hash);\n        if (this.fee.length)\n            writer.writeString(3, this.fee);\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrepareQueryResponse {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrepareQueryResponse();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    reader.readMessage(message.err, () => message.err = ErrMsg.deserialize(reader));\n                    break;\n                case 2:\n                    message.query_hash = reader.readString();\n                    break;\n                case 3:\n                    message.fee = reader.readString();\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): PrepareQueryResponse {\n        return PrepareQueryResponse.deserialize(bytes);\n    }\n}\nexport class SubmitAppCircuitProofRequest extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        query_hash?: string;\n        target_chain_id?: number;\n        proof?: string;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"query_hash\" in data && data.query_hash != undefined) {\n                this.query_hash = data.query_hash;\n            }\n            if (\"target_chain_id\" in data && data.target_chain_id != undefined) {\n                this.target_chain_id = data.target_chain_id;\n            }\n            if (\"proof\" in data && data.proof != undefined) {\n                this.proof = data.proof;\n            }\n        }\n    }\n    get query_hash() {\n        return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n    }\n    set query_hash(value: string) {\n        pb_1.Message.setField(this, 1, value);\n    }\n    get target_chain_id() {\n        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n    }\n    set target_chain_id(value: number) {\n        pb_1.Message.setField(this, 2, value);\n    }\n    get proof() {\n        return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n    }\n    set proof(value: string) {\n        pb_1.Message.setField(this, 3, value);\n    }\n    static fromObject(data: {\n        query_hash?: string;\n        target_chain_id?: number;\n        proof?: string;\n    }): SubmitAppCircuitProofRequest {\n        const message = new SubmitAppCircuitProofRequest({});\n        if (data.query_hash != null) {\n            message.query_hash = data.query_hash;\n        }\n        if (data.target_chain_id != null) {\n            message.target_chain_id = data.target_chain_id;\n        }\n        if (data.proof != null) {\n            message.proof = data.proof;\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            query_hash?: string;\n            target_chain_id?: number;\n            proof?: string;\n        } = {};\n        if (this.query_hash != null) {\n            data.query_hash = this.query_hash;\n        }\n        if (this.target_chain_id != null) {\n            data.target_chain_id = this.target_chain_id;\n        }\n        if (this.proof != null) {\n            data.proof = this.proof;\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.query_hash.length)\n            writer.writeString(1, this.query_hash);\n        if (this.target_chain_id != 0)\n            writer.writeUint64(2, this.target_chain_id);\n        if (this.proof.length)\n            writer.writeString(3, this.proof);\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubmitAppCircuitProofRequest {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubmitAppCircuitProofRequest();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    message.query_hash = reader.readString();\n                    break;\n                case 2:\n                    message.target_chain_id = reader.readUint64();\n                    break;\n                case 3:\n                    message.proof = reader.readString();\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): SubmitAppCircuitProofRequest {\n        return SubmitAppCircuitProofRequest.deserialize(bytes);\n    }\n}\nexport class SubmitAppCircuitProofResponse extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        err?: ErrMsg;\n        success?: boolean;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"err\" in data && data.err != undefined) {\n                this.err = data.err;\n            }\n            if (\"success\" in data && data.success != undefined) {\n                this.success = data.success;\n            }\n        }\n    }\n    get err() {\n        return pb_1.Message.getWrapperField(this, ErrMsg, 1) as ErrMsg;\n    }\n    set err(value: ErrMsg) {\n        pb_1.Message.setWrapperField(this, 1, value);\n    }\n    get has_err() {\n        return pb_1.Message.getField(this, 1) != null;\n    }\n    get success() {\n        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;\n    }\n    set success(value: boolean) {\n        pb_1.Message.setField(this, 2, value);\n    }\n    static fromObject(data: {\n        err?: ReturnType<typeof ErrMsg.prototype.toObject>;\n        success?: boolean;\n    }): SubmitAppCircuitProofResponse {\n        const message = new SubmitAppCircuitProofResponse({});\n        if (data.err != null) {\n            message.err = ErrMsg.fromObject(data.err);\n        }\n        if (data.success != null) {\n            message.success = data.success;\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            err?: ReturnType<typeof ErrMsg.prototype.toObject>;\n            success?: boolean;\n        } = {};\n        if (this.err != null) {\n            data.err = this.err.toObject();\n        }\n        if (this.success != null) {\n            data.success = this.success;\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.has_err)\n            writer.writeMessage(1, this.err, () => this.err.serialize(writer));\n        if (this.success != false)\n            writer.writeBool(2, this.success);\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubmitAppCircuitProofResponse {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubmitAppCircuitProofResponse();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    reader.readMessage(message.err, () => message.err = ErrMsg.deserialize(reader));\n                    break;\n                case 2:\n                    message.success = reader.readBool();\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): SubmitAppCircuitProofResponse {\n        return SubmitAppCircuitProofResponse.deserialize(bytes);\n    }\n}\nexport class GetQueryStatusRequest extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        query_hash?: string;\n        target_chain_id?: number;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"query_hash\" in data && data.query_hash != undefined) {\n                this.query_hash = data.query_hash;\n            }\n            if (\"target_chain_id\" in data && data.target_chain_id != undefined) {\n                this.target_chain_id = data.target_chain_id;\n            }\n        }\n    }\n    get query_hash() {\n        return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n    }\n    set query_hash(value: string) {\n        pb_1.Message.setField(this, 1, value);\n    }\n    get target_chain_id() {\n        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n    }\n    set target_chain_id(value: number) {\n        pb_1.Message.setField(this, 2, value);\n    }\n    static fromObject(data: {\n        query_hash?: string;\n        target_chain_id?: number;\n    }): GetQueryStatusRequest {\n        const message = new GetQueryStatusRequest({});\n        if (data.query_hash != null) {\n            message.query_hash = data.query_hash;\n        }\n        if (data.target_chain_id != null) {\n            message.target_chain_id = data.target_chain_id;\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            query_hash?: string;\n            target_chain_id?: number;\n        } = {};\n        if (this.query_hash != null) {\n            data.query_hash = this.query_hash;\n        }\n        if (this.target_chain_id != null) {\n            data.target_chain_id = this.target_chain_id;\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.query_hash.length)\n            writer.writeString(1, this.query_hash);\n        if (this.target_chain_id != 0)\n            writer.writeUint64(2, this.target_chain_id);\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetQueryStatusRequest {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetQueryStatusRequest();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    message.query_hash = reader.readString();\n                    break;\n                case 2:\n                    message.target_chain_id = reader.readUint64();\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): GetQueryStatusRequest {\n        return GetQueryStatusRequest.deserialize(bytes);\n    }\n}\nexport class GetQueryStatusResponse extends pb_1.Message {\n    #one_of_decls: number[][] = [];\n    constructor(data?: any[] | {\n        err?: ErrMsg;\n        status?: QueryStatus;\n        tx_hash?: string;\n    }) {\n        super();\n        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n        if (!Array.isArray(data) && typeof data == \"object\") {\n            if (\"err\" in data && data.err != undefined) {\n                this.err = data.err;\n            }\n            if (\"status\" in data && data.status != undefined) {\n                this.status = data.status;\n            }\n            if (\"tx_hash\" in data && data.tx_hash != undefined) {\n                this.tx_hash = data.tx_hash;\n            }\n        }\n    }\n    get err() {\n        return pb_1.Message.getWrapperField(this, ErrMsg, 1) as ErrMsg;\n    }\n    set err(value: ErrMsg) {\n        pb_1.Message.setWrapperField(this, 1, value);\n    }\n    get has_err() {\n        return pb_1.Message.getField(this, 1) != null;\n    }\n    get status() {\n        return pb_1.Message.getFieldWithDefault(this, 2, QueryStatus.QS_UNKNOWN) as QueryStatus;\n    }\n    set status(value: QueryStatus) {\n        pb_1.Message.setField(this, 2, value);\n    }\n    get tx_hash() {\n        return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n    }\n    set tx_hash(value: string) {\n        pb_1.Message.setField(this, 3, value);\n    }\n    static fromObject(data: {\n        err?: ReturnType<typeof ErrMsg.prototype.toObject>;\n        status?: QueryStatus;\n        tx_hash?: string;\n    }): GetQueryStatusResponse {\n        const message = new GetQueryStatusResponse({});\n        if (data.err != null) {\n            message.err = ErrMsg.fromObject(data.err);\n        }\n        if (data.status != null) {\n            message.status = data.status;\n        }\n        if (data.tx_hash != null) {\n            message.tx_hash = data.tx_hash;\n        }\n        return message;\n    }\n    toObject() {\n        const data: {\n            err?: ReturnType<typeof ErrMsg.prototype.toObject>;\n            status?: QueryStatus;\n            tx_hash?: string;\n        } = {};\n        if (this.err != null) {\n            data.err = this.err.toObject();\n        }\n        if (this.status != null) {\n            data.status = this.status;\n        }\n        if (this.tx_hash != null) {\n            data.tx_hash = this.tx_hash;\n        }\n        return data;\n    }\n    serialize(): Uint8Array;\n    serialize(w: pb_1.BinaryWriter): void;\n    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n        const writer = w || new pb_1.BinaryWriter();\n        if (this.has_err)\n            writer.writeMessage(1, this.err, () => this.err.serialize(writer));\n        if (this.status != QueryStatus.QS_UNKNOWN)\n            writer.writeEnum(2, this.status);\n        if (this.tx_hash.length)\n            writer.writeString(3, this.tx_hash);\n        if (!w)\n            return writer.getResultBuffer();\n    }\n    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetQueryStatusResponse {\n        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetQueryStatusResponse();\n        while (reader.nextField()) {\n            if (reader.isEndGroup())\n                break;\n            switch (reader.getFieldNumber()) {\n                case 1:\n                    reader.readMessage(message.err, () => message.err = ErrMsg.deserialize(reader));\n                    break;\n                case 2:\n                    message.status = reader.readEnum();\n                    break;\n                case 3:\n                    message.tx_hash = reader.readString();\n                    break;\n                default: reader.skipField();\n            }\n        }\n        return message;\n    }\n    serializeBinary(): Uint8Array {\n        return this.serialize();\n    }\n    static deserializeBinary(bytes: Uint8Array): GetQueryStatusResponse {\n        return GetQueryStatusResponse.deserialize(bytes);\n    }\n}\ninterface GrpcUnaryServiceInterface<P, R> {\n    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;\n    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;\n    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;\n    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;\n}\ninterface GrpcStreamServiceInterface<P, R> {\n    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;\n    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;\n}\ninterface GrpWritableServiceInterface<P, R> {\n    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;\n    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;\n    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;\n    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;\n}\ninterface GrpcChunkServiceInterface<P, R> {\n    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;\n    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;\n}\ninterface GrpcPromiseServiceInterface<P, R> {\n    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;\n    (message: P, options?: grpc_1.CallOptions): Promise<R>;\n}\nexport abstract class UnimplementedGatewayService {\n    static definition = {\n        PrepareQuery: {\n            path: \"/brevis.Gateway/PrepareQuery\",\n            requestStream: false,\n            responseStream: false,\n            requestSerialize: (message: PrepareQueryRequest) => Buffer.from(message.serialize()),\n            requestDeserialize: (bytes: Buffer) => PrepareQueryRequest.deserialize(new Uint8Array(bytes)),\n            responseSerialize: (message: PrepareQueryResponse) => Buffer.from(message.serialize()),\n            responseDeserialize: (bytes: Buffer) => PrepareQueryResponse.deserialize(new Uint8Array(bytes))\n        },\n        SubmitAppCircuitProof: {\n            path: \"/brevis.Gateway/SubmitAppCircuitProof\",\n            requestStream: false,\n            responseStream: false,\n            requestSerialize: (message: SubmitAppCircuitProofRequest) => Buffer.from(message.serialize()),\n            requestDeserialize: (bytes: Buffer) => SubmitAppCircuitProofRequest.deserialize(new Uint8Array(bytes)),\n            responseSerialize: (message: SubmitAppCircuitProofResponse) => Buffer.from(message.serialize()),\n            responseDeserialize: (bytes: Buffer) => SubmitAppCircuitProofResponse.deserialize(new Uint8Array(bytes))\n        },\n        GetQueryStatus: {\n            path: \"/brevis.Gateway/GetQueryStatus\",\n            requestStream: false,\n            responseStream: false,\n            requestSerialize: (message: GetQueryStatusRequest) => Buffer.from(message.serialize()),\n            requestDeserialize: (bytes: Buffer) => GetQueryStatusRequest.deserialize(new Uint8Array(bytes)),\n            responseSerialize: (message: GetQueryStatusResponse) => Buffer.from(message.serialize()),\n            responseDeserialize: (bytes: Buffer) => GetQueryStatusResponse.deserialize(new Uint8Array(bytes))\n        }\n    };\n    [method: string]: grpc_1.UntypedHandleCall;\n    abstract PrepareQuery(call: grpc_1.ServerUnaryCall<PrepareQueryRequest, PrepareQueryResponse>, callback: grpc_1.sendUnaryData<PrepareQueryResponse>): void;\n    abstract SubmitAppCircuitProof(call: grpc_1.ServerUnaryCall<SubmitAppCircuitProofRequest, SubmitAppCircuitProofResponse>, callback: grpc_1.sendUnaryData<SubmitAppCircuitProofResponse>): void;\n    abstract GetQueryStatus(call: grpc_1.ServerUnaryCall<GetQueryStatusRequest, GetQueryStatusResponse>, callback: grpc_1.sendUnaryData<GetQueryStatusResponse>): void;\n}\nexport class GatewayClient extends grpc_1.makeGenericClientConstructor(UnimplementedGatewayService.definition, \"Gateway\", {}) {\n    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {\n        super(address, credentials, options);\n    }\n    PrepareQuery: GrpcPromiseServiceInterface<PrepareQueryRequest, PrepareQueryResponse> = (message: PrepareQueryRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<PrepareQueryResponse> => { if (!metadata) {\n        metadata = new grpc_1.Metadata;\n    } if (!options) {\n        options = {};\n    } return new Promise((resolve, reject) => super.PrepareQuery(message, metadata, options, (error: grpc_1.ServiceError, response: PrepareQueryResponse) => {\n        if (error) {\n            reject(error);\n        }\n        else {\n            resolve(response);\n        }\n    })); };\n    SubmitAppCircuitProof: GrpcPromiseServiceInterface<SubmitAppCircuitProofRequest, SubmitAppCircuitProofResponse> = (message: SubmitAppCircuitProofRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<SubmitAppCircuitProofResponse> => { if (!metadata) {\n        metadata = new grpc_1.Metadata;\n    } if (!options) {\n        options = {};\n    } return new Promise((resolve, reject) => super.SubmitAppCircuitProof(message, metadata, options, (error: grpc_1.ServiceError, response: SubmitAppCircuitProofResponse) => {\n        if (error) {\n            reject(error);\n        }\n        else {\n            resolve(response);\n        }\n    })); };\n    GetQueryStatus: GrpcPromiseServiceInterface<GetQueryStatusRequest, GetQueryStatusResponse> = (message: GetQueryStatusRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<GetQueryStatusResponse> => { if (!metadata) {\n        metadata = new grpc_1.Metadata;\n    } if (!options) {\n        options = {};\n    } return new Promise((resolve, reject) => super.GetQueryStatus(message, metadata, options, (error: grpc_1.ServiceError, response: GetQueryStatusResponse) => {\n        if (error) {\n            reject(error);\n        }\n        else {\n            resolve(response);\n        }\n    })); };\n}\n","import { ethers } from 'ethers';\n\nexport type CustomInput = Record<string, CircuitValue | CircuitValue[]>;\n\nexport type CircuitDataType = 'Uint248' | 'Uint521' | 'Int248' | 'Bytes32';\n\nexport interface CircuitValue {\n    type: CircuitDataType;\n    data: string;\n}\n\nexport function asUint248(input: string): CircuitValue {\n    const big = ethers.getBigInt(input);\n    return { type: 'Uint248', data: big.toString(10) };\n}\n\nexport function asUint521(input: string): CircuitValue {\n    const big = ethers.getBigInt(input);\n    return { type: 'Uint521', data: big.toString(10) };\n}\n\nexport function asInt248(input: string): CircuitValue {\n    const big = ethers.getBigInt(input);\n    return { type: 'Int248', data: big.toString(10) };\n}\n\nexport function asBytes32(input: string): CircuitValue {\n    if (!ethers.isHexString(input)) {\n        throw new Error(`value ${input} is not bytes32`);\n    }\n    const bs = ethers.getBytes(input);\n    if (bs.length !== 32) {\n        throw new Error(`asBytes32 must take bytes of length 32: actual ${bs.length}`);\n    }\n    return { type: 'Bytes32', data: input };\n}\n","import { credentials } from '@grpc/grpc-js';\nimport {\n    GetProofRequest,\n    GetProofResponse,\n    ProveAsyncResponse,\n    ProverClient,\n    type ProveResponse,\n} from '../proto/sdk/prover';\nimport { type ProofRequest } from './request';\n\nexport class Prover {\n    private readonly client: ProverClient;\n\n    public constructor(url: string) {\n        const cred = credentials.createInsecure();\n        this.client = new ProverClient(url, cred);\n    }\n\n    public async prove(request: ProofRequest): Promise<ProveResponse> {\n        const res = await this.client.Prove(request.build());\n        return res;\n    }\n\n    public async proveAsync(request: ProofRequest): Promise<ProveAsyncResponse> {\n        const res = await this.client.ProveAsync(request.build());\n        return res;\n    }\n\n    public async getProof(id: string): Promise<GetProofResponse> {\n        const res = await this.client.GetProof(new GetProofRequest({ proof_id: id }));\n        return res;\n    }\n}\n","import { ethers } from 'ethers';\nimport { ProveRequest } from '../proto/sdk/prover';\nimport {\n    CustomInput as CustomInputPb,\n    Field,\n    IndexedReceipt,\n    IndexedStorage,\n    IndexedTransaction,\n    type ReceiptData,\n    type StorageData,\n    type TransactionData,\n} from '../proto/sdk/types';\nimport { CustomInput } from './circuit-types';\n\nexport class ProofRequest {\n    private readonly receipts: IndexedReceipt[] = [];\n    private readonly storages: IndexedStorage[] = [];\n    private readonly transactions: IndexedTransaction[] = [];\n    private customInput?: CustomInputPb;\n\n    public getReceipts(): IndexedReceipt[] {\n        return this.receipts;\n    }\n\n    public getStorages(): IndexedStorage[] {\n        return this.storages;\n    }\n\n    public getTransactions(): IndexedTransaction[] {\n        return this.transactions;\n    }\n\n    public addReceipt(data: ReceiptData, index?: number): void {\n        validateReceipt(data);\n        this.receipts.push(new IndexedReceipt({ index, data }));\n    }\n\n    public addStorage(data: StorageData, index?: number): void {\n        validateStorage(data);\n        this.storages.push(new IndexedStorage({ index, data }));\n    }\n\n    public addTransaction(data: TransactionData, index?: number): void {\n        validateTransaction(data);\n        this.transactions.push(new IndexedTransaction({ index, data }));\n    }\n\n    public setCustomInput(data: CustomInput): void {\n        this.customInput = new CustomInputPb({\n            json_bytes: JSON.stringify(data),\n        });\n    }\n\n    public build(): ProveRequest {\n        if (this.customInput === undefined) {\n            this.customInput = new CustomInputPb({ json_bytes: '{}' });\n        }\n        const req = new ProveRequest({\n            receipts: this.receipts,\n            storages: this.storages,\n            transactions: this.transactions,\n            custom_input: this.customInput,\n        });\n        return req;\n    }\n}\n\nfunction validateReceipt(d: ReceiptData) {\n    if (d.block_num < 0) err('receipt.block_num', d.block_num);\n    if (!validLen(d.tx_hash)) err('transaction.tx_hash', d.tx_hash);\n    d.fields.forEach((field, i) => {\n        validateReceiptField(field, i);\n    });\n}\n\nfunction validateReceiptField(d: Field, i: number) {\n    const field = `receipt.field[${i}]`;\n    if (!ethers.isAddress(d.contract)) err(field + '.contract', d.contract);\n    if (d.log_index < 0) err(field + '.log_index', d.log_index);\n    if (!validLen(d.event_id)) err(field + '.event_id', d.event_id);\n    if (d.field_index < 0) err(field + '.field_index', d.field_index);\n    if (!validLen(d.value)) err(field + '.value', d.value);\n}\n\nfunction validateStorage(d: StorageData) {\n    if (d.block_num < 0) err('storage.block_num', d.block_num);\n    if (!ethers.isAddress(d.address)) err('storage.address', d.address);\n    if (!validLen(d.slot)) err('storage.slot', d.slot);\n    if (!validLen(d.value)) err('storage.value', d.value);\n}\n\nfunction validateTransaction(d: TransactionData) {\n    if (!validLen(d.hash)) err('transaction.hash', d.hash);\n    if (d.block_num < 0) err('transaction.block_num', d.block_num);\n    if (d.nonce < 0) err('transaction.nonce', d.nonce);\n    if (!validLen(d.gas_tip_cap_or_gas_price)) err('transaction.gas_tip_cap_or_gas_price', d.gas_tip_cap_or_gas_price);\n    if (!validLen(d.gas_fee_cap)) err('transaction.gas_fee_cap', d.gas_fee_cap);\n    if (d.gas_limit < 0) err('transaction.gas_limit', d.gas_limit);\n    if (!ethers.isAddress(d.from)) err('transaction.from', d.from);\n    if (!ethers.isAddress(d.to)) err('transaction.to', d.to);\n    if (!validLen(d.value)) err('transaction.value', d.value);\n}\n\nfunction validLen(d: string): boolean {\n    if (!ethers.isBytesLike(d)) {\n        d = ethers.toBeHex(d);\n    }\n    const len = ethers.dataLength(d);\n    return len > 0 && len <= 32;\n}\n\nfunction err(fieldName: string, value: any) {\n    throw new Error(`invalid ${fieldName} ${value}`);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACKA,WAAsB;AALtB;AAMO,IAAM,kBAAN,MAAM,wBAA4B,aAAQ;AAAA,EAE7C,YAAY,MAQT;AACC,UAAM;AAVV,sCAA4B,CAAC;AAWzB,IAAK,aAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,mBAAK,cAAa;AAChG,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,uBAAuB,QAAQ,KAAK,qBAAqB,QAAW;AACpE,aAAK,oBAAoB,KAAK;AAAA,MAClC;AACA,UAAI,QAAQ,QAAQ,KAAK,MAAM,QAAW;AACtC,aAAK,KAAK,KAAK;AAAA,MACnB;AACA,UAAI,uBAAuB,QAAQ,KAAK,qBAAqB,QAAW;AACpE,aAAK,oBAAoB,KAAK;AAAA,MAClC;AACA,UAAI,wBAAwB,QAAQ,KAAK,sBAAsB,QAAW;AACtE,aAAK,qBAAqB,KAAK;AAAA,MACnC;AACA,UAAI,aAAa,QAAQ,KAAK,WAAW,QAAW;AAChD,aAAK,UAAU,KAAK;AAAA,MACxB;AACA,UAAI,kBAAkB,QAAQ,KAAK,gBAAgB,QAAW;AAC1D,aAAK,eAAe,KAAK;AAAA,MAC7B;AACA,UAAI,YAAY,QAAQ,KAAK,UAAU,QAAW;AAC9C,aAAK,SAAS,KAAK;AAAA,MACvB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,oBAAoB;AACpB,WAAY,aAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,kBAAkB,OAAe;AACjC,IAAK,aAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,KAAK;AACL,WAAY,aAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,GAAG,OAAe;AAClB,IAAK,aAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,oBAAoB;AACpB,WAAY,aAAQ,oBAAoB,MAAM,GAAG,CAAC,CAAC;AAAA,EACvD;AAAA,EACA,IAAI,kBAAkB,OAAiB;AACnC,IAAK,aAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,qBAAqB;AACrB,WAAY,aAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,mBAAmB,OAAe;AAClC,IAAK,aAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,UAAU;AACV,WAAY,aAAQ,oBAAoB,MAAM,GAAG,CAAC,CAAC;AAAA,EACvD;AAAA,EACA,IAAI,QAAQ,OAAkB;AAC1B,IAAK,aAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,eAAe;AACf,WAAY,aAAQ,oBAAoB,MAAM,GAAG,KAAK;AAAA,EAC1D;AAAA,EACA,IAAI,aAAa,OAAgB;AAC7B,IAAK,aAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,SAAS;AACT,WAAY,aAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,OAAO,OAAe;AACtB,IAAK,aAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,OAAO,WAAW,MAQC;AACf,UAAM,UAAU,IAAI,gBAAe,CAAC,CAAC;AACrC,QAAI,KAAK,qBAAqB,MAAM;AAChC,cAAQ,oBAAoB,KAAK;AAAA,IACrC;AACA,QAAI,KAAK,MAAM,MAAM;AACjB,cAAQ,KAAK,KAAK;AAAA,IACtB;AACA,QAAI,KAAK,qBAAqB,MAAM;AAChC,cAAQ,oBAAoB,KAAK;AAAA,IACrC;AACA,QAAI,KAAK,sBAAsB,MAAM;AACjC,cAAQ,qBAAqB,KAAK;AAAA,IACtC;AACA,QAAI,KAAK,WAAW,MAAM;AACtB,cAAQ,UAAU,KAAK;AAAA,IAC3B;AACA,QAAI,KAAK,gBAAgB,MAAM;AAC3B,cAAQ,eAAe,KAAK;AAAA,IAChC;AACA,QAAI,KAAK,UAAU,MAAM;AACrB,cAAQ,SAAS,KAAK;AAAA,IAC1B;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAQF,CAAC;AACL,QAAI,KAAK,qBAAqB,MAAM;AAChC,WAAK,oBAAoB,KAAK;AAAA,IAClC;AACA,QAAI,KAAK,MAAM,MAAM;AACjB,WAAK,KAAK,KAAK;AAAA,IACnB;AACA,QAAI,KAAK,qBAAqB,MAAM;AAChC,WAAK,oBAAoB,KAAK;AAAA,IAClC;AACA,QAAI,KAAK,sBAAsB,MAAM;AACjC,WAAK,qBAAqB,KAAK;AAAA,IACnC;AACA,QAAI,KAAK,WAAW,MAAM;AACtB,WAAK,UAAU,KAAK;AAAA,IACxB;AACA,QAAI,KAAK,gBAAgB,MAAM;AAC3B,WAAK,eAAe,KAAK;AAAA,IAC7B;AACA,QAAI,KAAK,UAAU,MAAM;AACrB,WAAK,SAAS,KAAK;AAAA,IACvB;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,kBAAa;AAC1C,QAAI,KAAK,kBAAkB;AACvB,aAAO,YAAY,GAAG,KAAK,iBAAiB;AAChD,QAAI,KAAK,GAAG;AACR,aAAO,YAAY,GAAG,KAAK,EAAE;AACjC,QAAI,KAAK,kBAAkB;AACvB,aAAO,oBAAoB,GAAG,KAAK,iBAAiB;AACxD,QAAI,KAAK,mBAAmB;AACxB,aAAO,YAAY,GAAG,KAAK,kBAAkB;AACjD,QAAI,KAAK,QAAQ;AACb,aAAO,gBAAgB,GAAG,KAAK,OAAO;AAC1C,QAAI,KAAK,gBAAgB;AACrB,aAAO,UAAU,GAAG,KAAK,YAAY;AACzC,QAAI,KAAK,OAAO;AACZ,aAAO,YAAY,GAAG,KAAK,MAAM;AACrC,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAAuD;AACtE,UAAM,SAAS,iBAAsB,oBAAe,QAAQ,IAAS,kBAAa,KAAK,GAAG,UAAU,IAAI,gBAAe;AACvH,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,kBAAQ,oBAAoB,OAAO,WAAW;AAC9C;AAAA,QACJ,KAAK;AACD,kBAAQ,KAAK,OAAO,WAAW;AAC/B;AAAA,QACJ,KAAK;AACD,UAAK,aAAQ,mBAAmB,SAAS,GAAG,OAAO,WAAW,CAAC;AAC/D;AAAA,QACJ,KAAK;AACD,kBAAQ,qBAAqB,OAAO,WAAW;AAC/C;AAAA,QACJ,KAAK;AACD,kBAAQ,UAAU,OAAO,eAAe;AACxC;AAAA,QACJ,KAAK;AACD,kBAAQ,eAAe,OAAO,SAAS;AACvC;AAAA,QACJ,KAAK;AACD,kBAAQ,SAAS,OAAO,WAAW;AACnC;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAAmC;AACxD,WAAO,gBAAe,YAAY,KAAK;AAAA,EAC3C;AACJ;AA3MI;AADG,IAAM,iBAAN;;;ACAP,IAAAA,QAAsB;AANtB,IAAAC;AAOO,IAAM,eAAN,MAAM,qBAAyB,cAAQ;AAAA,EAE1C,YAAY,MAIT;AACC,UAAM;AANV,uBAAAA,gBAA4B,CAAC;AAOzB,IAAK,cAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,GAAG,mBAAKA,eAAa;AAC7F,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,eAAe,QAAQ,KAAK,aAAa,QAAW;AACpD,aAAK,YAAY,KAAK;AAAA,MAC1B;AACA,UAAI,aAAa,QAAQ,KAAK,WAAW,QAAW;AAChD,aAAK,UAAU,KAAK;AAAA,MACxB;AACA,UAAI,YAAY,QAAQ,KAAK,UAAU,QAAW;AAC9C,aAAK,SAAS,KAAK;AAAA,MACvB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,YAAY;AACZ,WAAY,cAAQ,oBAAoB,MAAM,GAAG,CAAC;AAAA,EACtD;AAAA,EACA,IAAI,UAAU,OAAe;AACzB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,UAAU;AACV,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,QAAQ,OAAe;AACvB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,SAAS;AACT,WAAY,cAAQ,wBAAwB,MAAM,OAAO,CAAC;AAAA,EAC9D;AAAA,EACA,IAAI,OAAO,OAAgB;AACvB,IAAK,cAAQ,wBAAwB,MAAM,GAAG,KAAK;AAAA,EACvD;AAAA,EACA,OAAO,WAAW,MAIF;AACZ,UAAM,UAAU,IAAI,aAAY,CAAC,CAAC;AAClC,QAAI,KAAK,aAAa,MAAM;AACxB,cAAQ,YAAY,KAAK;AAAA,IAC7B;AACA,QAAI,KAAK,WAAW,MAAM;AACtB,cAAQ,UAAU,KAAK;AAAA,IAC3B;AACA,QAAI,KAAK,UAAU,MAAM;AACrB,cAAQ,SAAS,KAAK,OAAO,IAAI,UAAQ,MAAM,WAAW,IAAI,CAAC;AAAA,IACnE;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAIF,CAAC;AACL,QAAI,KAAK,aAAa,MAAM;AACxB,WAAK,YAAY,KAAK;AAAA,IAC1B;AACA,QAAI,KAAK,WAAW,MAAM;AACtB,WAAK,UAAU,KAAK;AAAA,IACxB;AACA,QAAI,KAAK,UAAU,MAAM;AACrB,WAAK,SAAS,KAAK,OAAO,IAAI,CAAC,SAAgB,KAAK,SAAS,CAAC;AAAA,IAClE;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,mBAAa;AAC1C,QAAI,KAAK,aAAa;AAClB,aAAO,YAAY,GAAG,KAAK,SAAS;AACxC,QAAI,KAAK,QAAQ;AACb,aAAO,YAAY,GAAG,KAAK,OAAO;AACtC,QAAI,KAAK,OAAO;AACZ,aAAO,qBAAqB,GAAG,KAAK,QAAQ,CAAC,SAAgB,KAAK,UAAU,MAAM,CAAC;AACvF,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAAoD;AACnE,UAAM,SAAS,iBAAsB,qBAAe,QAAQ,IAAS,mBAAa,KAAK,GAAG,UAAU,IAAI,aAAY;AACpH,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,kBAAQ,YAAY,OAAO,WAAW;AACtC;AAAA,QACJ,KAAK;AACD,kBAAQ,UAAU,OAAO,WAAW;AACpC;AAAA,QACJ,KAAK;AACD,iBAAO,YAAY,QAAQ,QAAQ,MAAW,cAAQ,0BAA0B,SAAS,GAAG,MAAM,YAAY,MAAM,GAAG,KAAK,CAAC;AAC7H;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAAgC;AACrD,WAAO,aAAY,YAAY,KAAK;AAAA,EACxC;AACJ;AA/GIA,iBAAA;AADG,IAAM,cAAN;AAPP,IAAAA;AAwHO,IAAM,SAAN,MAAM,eAAmB,cAAQ;AAAA,EAEpC,YAAY,MAOT;AACC,UAAM;AATV,uBAAAA,gBAA4B,CAAC;AAUzB,IAAK,cAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,mBAAKA,eAAa;AAC5F,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,cAAc,QAAQ,KAAK,YAAY,QAAW;AAClD,aAAK,WAAW,KAAK;AAAA,MACzB;AACA,UAAI,eAAe,QAAQ,KAAK,aAAa,QAAW;AACpD,aAAK,YAAY,KAAK;AAAA,MAC1B;AACA,UAAI,cAAc,QAAQ,KAAK,YAAY,QAAW;AAClD,aAAK,WAAW,KAAK;AAAA,MACzB;AACA,UAAI,WAAW,QAAQ,KAAK,SAAS,QAAW;AAC5C,aAAK,QAAQ,KAAK;AAAA,MACtB;AACA,UAAI,cAAc,QAAQ,KAAK,YAAY,QAAW;AAClD,aAAK,WAAW,KAAK;AAAA,MACzB;AACA,UAAI,iBAAiB,QAAQ,KAAK,eAAe,QAAW;AACxD,aAAK,cAAc,KAAK;AAAA,MAC5B;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,WAAW;AACX,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,SAAS,OAAe;AACxB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,YAAY;AACZ,WAAY,cAAQ,oBAAoB,MAAM,GAAG,CAAC;AAAA,EACtD;AAAA,EACA,IAAI,UAAU,OAAe;AACzB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,WAAW;AACX,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,SAAS,OAAe;AACxB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,QAAQ;AACR,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,MAAM,OAAe;AACrB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,WAAW;AACX,WAAY,cAAQ,oBAAoB,MAAM,GAAG,KAAK;AAAA,EAC1D;AAAA,EACA,IAAI,SAAS,OAAgB;AACzB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,cAAc;AACd,WAAY,cAAQ,oBAAoB,MAAM,GAAG,CAAC;AAAA,EACtD;AAAA,EACA,IAAI,YAAY,OAAe;AAC3B,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,OAAO,WAAW,MAOR;AACN,UAAM,UAAU,IAAI,OAAM,CAAC,CAAC;AAC5B,QAAI,KAAK,YAAY,MAAM;AACvB,cAAQ,WAAW,KAAK;AAAA,IAC5B;AACA,QAAI,KAAK,aAAa,MAAM;AACxB,cAAQ,YAAY,KAAK;AAAA,IAC7B;AACA,QAAI,KAAK,YAAY,MAAM;AACvB,cAAQ,WAAW,KAAK;AAAA,IAC5B;AACA,QAAI,KAAK,SAAS,MAAM;AACpB,cAAQ,QAAQ,KAAK;AAAA,IACzB;AACA,QAAI,KAAK,YAAY,MAAM;AACvB,cAAQ,WAAW,KAAK;AAAA,IAC5B;AACA,QAAI,KAAK,eAAe,MAAM;AAC1B,cAAQ,cAAc,KAAK;AAAA,IAC/B;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAOF,CAAC;AACL,QAAI,KAAK,YAAY,MAAM;AACvB,WAAK,WAAW,KAAK;AAAA,IACzB;AACA,QAAI,KAAK,aAAa,MAAM;AACxB,WAAK,YAAY,KAAK;AAAA,IAC1B;AACA,QAAI,KAAK,YAAY,MAAM;AACvB,WAAK,WAAW,KAAK;AAAA,IACzB;AACA,QAAI,KAAK,SAAS,MAAM;AACpB,WAAK,QAAQ,KAAK;AAAA,IACtB;AACA,QAAI,KAAK,YAAY,MAAM;AACvB,WAAK,WAAW,KAAK;AAAA,IACzB;AACA,QAAI,KAAK,eAAe,MAAM;AAC1B,WAAK,cAAc,KAAK;AAAA,IAC5B;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,mBAAa;AAC1C,QAAI,KAAK,SAAS;AACd,aAAO,YAAY,GAAG,KAAK,QAAQ;AACvC,QAAI,KAAK,aAAa;AAClB,aAAO,YAAY,GAAG,KAAK,SAAS;AACxC,QAAI,KAAK,SAAS;AACd,aAAO,YAAY,GAAG,KAAK,QAAQ;AACvC,QAAI,KAAK,MAAM;AACX,aAAO,YAAY,GAAG,KAAK,KAAK;AACpC,QAAI,KAAK,YAAY;AACjB,aAAO,UAAU,GAAG,KAAK,QAAQ;AACrC,QAAI,KAAK,eAAe;AACpB,aAAO,YAAY,GAAG,KAAK,WAAW;AAC1C,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAA8C;AAC7D,UAAM,SAAS,iBAAsB,qBAAe,QAAQ,IAAS,mBAAa,KAAK,GAAG,UAAU,IAAI,OAAM;AAC9G,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,kBAAQ,WAAW,OAAO,WAAW;AACrC;AAAA,QACJ,KAAK;AACD,kBAAQ,YAAY,OAAO,WAAW;AACtC;AAAA,QACJ,KAAK;AACD,kBAAQ,WAAW,OAAO,WAAW;AACrC;AAAA,QACJ,KAAK;AACD,kBAAQ,QAAQ,OAAO,WAAW;AAClC;AAAA,QACJ,KAAK;AACD,kBAAQ,WAAW,OAAO,SAAS;AACnC;AAAA,QACJ,KAAK;AACD,kBAAQ,cAAc,OAAO,WAAW;AACxC;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAA0B;AAC/C,WAAO,OAAM,YAAY,KAAK;AAAA,EAClC;AACJ;AApLIA,iBAAA;AADG,IAAM,QAAN;AAxHP,IAAAA;AA8SO,IAAM,eAAN,MAAM,qBAAyB,cAAQ;AAAA,EAE1C,YAAY,MAKT;AACC,UAAM;AAPV,uBAAAA,gBAA4B,CAAC;AAQzB,IAAK,cAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,mBAAKA,eAAa;AAC5F,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,eAAe,QAAQ,KAAK,aAAa,QAAW;AACpD,aAAK,YAAY,KAAK;AAAA,MAC1B;AACA,UAAI,aAAa,QAAQ,KAAK,WAAW,QAAW;AAChD,aAAK,UAAU,KAAK;AAAA,MACxB;AACA,UAAI,UAAU,QAAQ,KAAK,QAAQ,QAAW;AAC1C,aAAK,OAAO,KAAK;AAAA,MACrB;AACA,UAAI,WAAW,QAAQ,KAAK,SAAS,QAAW;AAC5C,aAAK,QAAQ,KAAK;AAAA,MACtB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,YAAY;AACZ,WAAY,cAAQ,oBAAoB,MAAM,GAAG,CAAC;AAAA,EACtD;AAAA,EACA,IAAI,UAAU,OAAe;AACzB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,UAAU;AACV,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,QAAQ,OAAe;AACvB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,OAAO;AACP,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,KAAK,OAAe;AACpB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,QAAQ;AACR,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,MAAM,OAAe;AACrB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,OAAO,WAAW,MAKF;AACZ,UAAM,UAAU,IAAI,aAAY,CAAC,CAAC;AAClC,QAAI,KAAK,aAAa,MAAM;AACxB,cAAQ,YAAY,KAAK;AAAA,IAC7B;AACA,QAAI,KAAK,WAAW,MAAM;AACtB,cAAQ,UAAU,KAAK;AAAA,IAC3B;AACA,QAAI,KAAK,QAAQ,MAAM;AACnB,cAAQ,OAAO,KAAK;AAAA,IACxB;AACA,QAAI,KAAK,SAAS,MAAM;AACpB,cAAQ,QAAQ,KAAK;AAAA,IACzB;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAKF,CAAC;AACL,QAAI,KAAK,aAAa,MAAM;AACxB,WAAK,YAAY,KAAK;AAAA,IAC1B;AACA,QAAI,KAAK,WAAW,MAAM;AACtB,WAAK,UAAU,KAAK;AAAA,IACxB;AACA,QAAI,KAAK,QAAQ,MAAM;AACnB,WAAK,OAAO,KAAK;AAAA,IACrB;AACA,QAAI,KAAK,SAAS,MAAM;AACpB,WAAK,QAAQ,KAAK;AAAA,IACtB;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,mBAAa;AAC1C,QAAI,KAAK,aAAa;AAClB,aAAO,YAAY,GAAG,KAAK,SAAS;AACxC,QAAI,KAAK,QAAQ;AACb,aAAO,YAAY,GAAG,KAAK,OAAO;AACtC,QAAI,KAAK,KAAK;AACV,aAAO,YAAY,GAAG,KAAK,IAAI;AACnC,QAAI,KAAK,MAAM;AACX,aAAO,YAAY,GAAG,KAAK,KAAK;AACpC,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAAoD;AACnE,UAAM,SAAS,iBAAsB,qBAAe,QAAQ,IAAS,mBAAa,KAAK,GAAG,UAAU,IAAI,aAAY;AACpH,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,kBAAQ,YAAY,OAAO,WAAW;AACtC;AAAA,QACJ,KAAK;AACD,kBAAQ,UAAU,OAAO,WAAW;AACpC;AAAA,QACJ,KAAK;AACD,kBAAQ,OAAO,OAAO,WAAW;AACjC;AAAA,QACJ,KAAK;AACD,kBAAQ,QAAQ,OAAO,WAAW;AAClC;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAAgC;AACrD,WAAO,aAAY,YAAY,KAAK;AAAA,EACxC;AACJ;AAtIIA,iBAAA;AADG,IAAM,cAAN;AA9SP,IAAAA;AAsbO,IAAM,mBAAN,MAAM,yBAA6B,cAAQ;AAAA,EAE9C,YAAY,MAWT;AACC,UAAM;AAbV,uBAAAA,gBAA4B,CAAC;AAczB,IAAK,cAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,mBAAKA,eAAa;AAC5F,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,UAAU,QAAQ,KAAK,QAAQ,QAAW;AAC1C,aAAK,OAAO,KAAK;AAAA,MACrB;AACA,UAAI,cAAc,QAAQ,KAAK,YAAY,QAAW;AAClD,aAAK,WAAW,KAAK;AAAA,MACzB;AACA,UAAI,eAAe,QAAQ,KAAK,aAAa,QAAW;AACpD,aAAK,YAAY,KAAK;AAAA,MAC1B;AACA,UAAI,WAAW,QAAQ,KAAK,SAAS,QAAW;AAC5C,aAAK,QAAQ,KAAK;AAAA,MACtB;AACA,UAAI,8BAA8B,QAAQ,KAAK,4BAA4B,QAAW;AAClF,aAAK,2BAA2B,KAAK;AAAA,MACzC;AACA,UAAI,iBAAiB,QAAQ,KAAK,eAAe,QAAW;AACxD,aAAK,cAAc,KAAK;AAAA,MAC5B;AACA,UAAI,eAAe,QAAQ,KAAK,aAAa,QAAW;AACpD,aAAK,YAAY,KAAK;AAAA,MAC1B;AACA,UAAI,UAAU,QAAQ,KAAK,QAAQ,QAAW;AAC1C,aAAK,OAAO,KAAK;AAAA,MACrB;AACA,UAAI,QAAQ,QAAQ,KAAK,MAAM,QAAW;AACtC,aAAK,KAAK,KAAK;AAAA,MACnB;AACA,UAAI,WAAW,QAAQ,KAAK,SAAS,QAAW;AAC5C,aAAK,QAAQ,KAAK;AAAA,MACtB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,OAAO;AACP,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,KAAK,OAAe;AACpB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,WAAW;AACX,WAAY,cAAQ,oBAAoB,MAAM,GAAG,CAAC;AAAA,EACtD;AAAA,EACA,IAAI,SAAS,OAAe;AACxB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,YAAY;AACZ,WAAY,cAAQ,oBAAoB,MAAM,GAAG,CAAC;AAAA,EACtD;AAAA,EACA,IAAI,UAAU,OAAe;AACzB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,QAAQ;AACR,WAAY,cAAQ,oBAAoB,MAAM,GAAG,CAAC;AAAA,EACtD;AAAA,EACA,IAAI,MAAM,OAAe;AACrB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,2BAA2B;AAC3B,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,yBAAyB,OAAe;AACxC,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,cAAc;AACd,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,YAAY,OAAe;AAC3B,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,YAAY;AACZ,WAAY,cAAQ,oBAAoB,MAAM,GAAG,CAAC;AAAA,EACtD;AAAA,EACA,IAAI,UAAU,OAAe;AACzB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,OAAO;AACP,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,KAAK,OAAe;AACpB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,KAAK;AACL,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,GAAG,OAAe;AAClB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,QAAQ;AACR,WAAY,cAAQ,oBAAoB,MAAM,IAAI,EAAE;AAAA,EACxD;AAAA,EACA,IAAI,MAAM,OAAe;AACrB,IAAK,cAAQ,SAAS,MAAM,IAAI,KAAK;AAAA,EACzC;AAAA,EACA,OAAO,WAAW,MAWE;AAChB,UAAM,UAAU,IAAI,iBAAgB,CAAC,CAAC;AACtC,QAAI,KAAK,QAAQ,MAAM;AACnB,cAAQ,OAAO,KAAK;AAAA,IACxB;AACA,QAAI,KAAK,YAAY,MAAM;AACvB,cAAQ,WAAW,KAAK;AAAA,IAC5B;AACA,QAAI,KAAK,aAAa,MAAM;AACxB,cAAQ,YAAY,KAAK;AAAA,IAC7B;AACA,QAAI,KAAK,SAAS,MAAM;AACpB,cAAQ,QAAQ,KAAK;AAAA,IACzB;AACA,QAAI,KAAK,4BAA4B,MAAM;AACvC,cAAQ,2BAA2B,KAAK;AAAA,IAC5C;AACA,QAAI,KAAK,eAAe,MAAM;AAC1B,cAAQ,cAAc,KAAK;AAAA,IAC/B;AACA,QAAI,KAAK,aAAa,MAAM;AACxB,cAAQ,YAAY,KAAK;AAAA,IAC7B;AACA,QAAI,KAAK,QAAQ,MAAM;AACnB,cAAQ,OAAO,KAAK;AAAA,IACxB;AACA,QAAI,KAAK,MAAM,MAAM;AACjB,cAAQ,KAAK,KAAK;AAAA,IACtB;AACA,QAAI,KAAK,SAAS,MAAM;AACpB,cAAQ,QAAQ,KAAK;AAAA,IACzB;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAWF,CAAC;AACL,QAAI,KAAK,QAAQ,MAAM;AACnB,WAAK,OAAO,KAAK;AAAA,IACrB;AACA,QAAI,KAAK,YAAY,MAAM;AACvB,WAAK,WAAW,KAAK;AAAA,IACzB;AACA,QAAI,KAAK,aAAa,MAAM;AACxB,WAAK,YAAY,KAAK;AAAA,IAC1B;AACA,QAAI,KAAK,SAAS,MAAM;AACpB,WAAK,QAAQ,KAAK;AAAA,IACtB;AACA,QAAI,KAAK,4BAA4B,MAAM;AACvC,WAAK,2BAA2B,KAAK;AAAA,IACzC;AACA,QAAI,KAAK,eAAe,MAAM;AAC1B,WAAK,cAAc,KAAK;AAAA,IAC5B;AACA,QAAI,KAAK,aAAa,MAAM;AACxB,WAAK,YAAY,KAAK;AAAA,IAC1B;AACA,QAAI,KAAK,QAAQ,MAAM;AACnB,WAAK,OAAO,KAAK;AAAA,IACrB;AACA,QAAI,KAAK,MAAM,MAAM;AACjB,WAAK,KAAK,KAAK;AAAA,IACnB;AACA,QAAI,KAAK,SAAS,MAAM;AACpB,WAAK,QAAQ,KAAK;AAAA,IACtB;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,mBAAa;AAC1C,QAAI,KAAK,KAAK;AACV,aAAO,YAAY,GAAG,KAAK,IAAI;AACnC,QAAI,KAAK,YAAY;AACjB,aAAO,YAAY,GAAG,KAAK,QAAQ;AACvC,QAAI,KAAK,aAAa;AAClB,aAAO,YAAY,GAAG,KAAK,SAAS;AACxC,QAAI,KAAK,SAAS;AACd,aAAO,YAAY,GAAG,KAAK,KAAK;AACpC,QAAI,KAAK,yBAAyB;AAC9B,aAAO,YAAY,GAAG,KAAK,wBAAwB;AACvD,QAAI,KAAK,YAAY;AACjB,aAAO,YAAY,GAAG,KAAK,WAAW;AAC1C,QAAI,KAAK,aAAa;AAClB,aAAO,YAAY,GAAG,KAAK,SAAS;AACxC,QAAI,KAAK,KAAK;AACV,aAAO,YAAY,GAAG,KAAK,IAAI;AACnC,QAAI,KAAK,GAAG;AACR,aAAO,YAAY,GAAG,KAAK,EAAE;AACjC,QAAI,KAAK,MAAM;AACX,aAAO,YAAY,IAAI,KAAK,KAAK;AACrC,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAAwD;AACvE,UAAM,SAAS,iBAAsB,qBAAe,QAAQ,IAAS,mBAAa,KAAK,GAAG,UAAU,IAAI,iBAAgB;AACxH,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,kBAAQ,OAAO,OAAO,WAAW;AACjC;AAAA,QACJ,KAAK;AACD,kBAAQ,WAAW,OAAO,WAAW;AACrC;AAAA,QACJ,KAAK;AACD,kBAAQ,YAAY,OAAO,WAAW;AACtC;AAAA,QACJ,KAAK;AACD,kBAAQ,QAAQ,OAAO,WAAW;AAClC;AAAA,QACJ,KAAK;AACD,kBAAQ,2BAA2B,OAAO,WAAW;AACrD;AAAA,QACJ,KAAK;AACD,kBAAQ,cAAc,OAAO,WAAW;AACxC;AAAA,QACJ,KAAK;AACD,kBAAQ,YAAY,OAAO,WAAW;AACtC;AAAA,QACJ,KAAK;AACD,kBAAQ,OAAO,OAAO,WAAW;AACjC;AAAA,QACJ,KAAK;AACD,kBAAQ,KAAK,OAAO,WAAW;AAC/B;AAAA,QACJ,KAAK;AACD,kBAAQ,QAAQ,OAAO,WAAW;AAClC;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAAoC;AACzD,WAAO,iBAAgB,YAAY,KAAK;AAAA,EAC5C;AACJ;AAhRIA,iBAAA;AADG,IAAM,kBAAN;AAtbP,IAAAA;AAwsBO,IAAM,eAAN,MAAM,qBAAyB,cAAQ;AAAA,EAE1C,YAAY,MAET;AACC,UAAM;AAJV,uBAAAA,gBAA4B,CAAC;AAKzB,IAAK,cAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,mBAAKA,eAAa;AAC5F,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,gBAAgB,QAAQ,KAAK,cAAc,QAAW;AACtD,aAAK,aAAa,KAAK;AAAA,MAC3B;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,aAAa;AACb,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,WAAW,OAAe;AAC1B,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,OAAO,WAAW,MAEF;AACZ,UAAM,UAAU,IAAI,aAAY,CAAC,CAAC;AAClC,QAAI,KAAK,cAAc,MAAM;AACzB,cAAQ,aAAa,KAAK;AAAA,IAC9B;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAEF,CAAC;AACL,QAAI,KAAK,cAAc,MAAM;AACzB,WAAK,aAAa,KAAK;AAAA,IAC3B;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,mBAAa;AAC1C,QAAI,KAAK,WAAW;AAChB,aAAO,YAAY,GAAG,KAAK,UAAU;AACzC,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAAoD;AACnE,UAAM,SAAS,iBAAsB,qBAAe,QAAQ,IAAS,mBAAa,KAAK,GAAG,UAAU,IAAI,aAAY;AACpH,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,kBAAQ,aAAa,OAAO,WAAW;AACvC;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAAgC;AACrD,WAAO,aAAY,YAAY,KAAK;AAAA,EACxC;AACJ;AAjEIA,iBAAA;AADG,IAAM,cAAN;AAxsBP,IAAAA;AA2wBO,IAAM,kBAAN,MAAM,wBAA4B,cAAQ;AAAA,EAE7C,YAAY,MAGT;AACC,UAAM;AALV,uBAAAA,gBAA4B,CAAC;AAMzB,IAAK,cAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,mBAAKA,eAAa;AAC5F,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,WAAW,QAAQ,KAAK,SAAS,QAAW;AAC5C,aAAK,QAAQ,KAAK;AAAA,MACtB;AACA,UAAI,UAAU,QAAQ,KAAK,QAAQ,QAAW;AAC1C,aAAK,OAAO,KAAK;AAAA,MACrB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,QAAQ;AACR,WAAY,cAAQ,oBAAoB,MAAM,GAAG,CAAC;AAAA,EACtD;AAAA,EACA,IAAI,MAAM,OAAe;AACrB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,OAAO;AACP,WAAY,cAAQ,gBAAgB,MAAM,aAAa,CAAC;AAAA,EAC5D;AAAA,EACA,IAAI,KAAK,OAAoB;AACzB,IAAK,cAAQ,gBAAgB,MAAM,GAAG,KAAK;AAAA,EAC/C;AAAA,EACA,IAAI,WAAW;AACX,WAAY,cAAQ,SAAS,MAAM,CAAC,KAAK;AAAA,EAC7C;AAAA,EACA,OAAO,WAAW,MAGC;AACf,UAAM,UAAU,IAAI,gBAAe,CAAC,CAAC;AACrC,QAAI,KAAK,SAAS,MAAM;AACpB,cAAQ,QAAQ,KAAK;AAAA,IACzB;AACA,QAAI,KAAK,QAAQ,MAAM;AACnB,cAAQ,OAAO,YAAY,WAAW,KAAK,IAAI;AAAA,IACnD;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAGF,CAAC;AACL,QAAI,KAAK,SAAS,MAAM;AACpB,WAAK,QAAQ,KAAK;AAAA,IACtB;AACA,QAAI,KAAK,QAAQ,MAAM;AACnB,WAAK,OAAO,KAAK,KAAK,SAAS;AAAA,IACnC;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,mBAAa;AAC1C,QAAI,KAAK,SAAS;AACd,aAAO,YAAY,GAAG,KAAK,KAAK;AACpC,QAAI,KAAK;AACL,aAAO,aAAa,GAAG,KAAK,MAAM,MAAM,KAAK,KAAK,UAAU,MAAM,CAAC;AACvE,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAAuD;AACtE,UAAM,SAAS,iBAAsB,qBAAe,QAAQ,IAAS,mBAAa,KAAK,GAAG,UAAU,IAAI,gBAAe;AACvH,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,kBAAQ,QAAQ,OAAO,WAAW;AAClC;AAAA,QACJ,KAAK;AACD,iBAAO,YAAY,QAAQ,MAAM,MAAM,QAAQ,OAAO,YAAY,YAAY,MAAM,CAAC;AACrF;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAAmC;AACxD,WAAO,gBAAe,YAAY,KAAK;AAAA,EAC3C;AACJ;AA3FIA,iBAAA;AADG,IAAM,iBAAN;AA3wBP,IAAAA;AAw2BO,IAAM,kBAAN,MAAM,wBAA4B,cAAQ;AAAA,EAE7C,YAAY,MAGT;AACC,UAAM;AALV,uBAAAA,gBAA4B,CAAC;AAMzB,IAAK,cAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,mBAAKA,eAAa;AAC5F,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,WAAW,QAAQ,KAAK,SAAS,QAAW;AAC5C,aAAK,QAAQ,KAAK;AAAA,MACtB;AACA,UAAI,UAAU,QAAQ,KAAK,QAAQ,QAAW;AAC1C,aAAK,OAAO,KAAK;AAAA,MACrB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,QAAQ;AACR,WAAY,cAAQ,oBAAoB,MAAM,GAAG,CAAC;AAAA,EACtD;AAAA,EACA,IAAI,MAAM,OAAe;AACrB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,OAAO;AACP,WAAY,cAAQ,gBAAgB,MAAM,aAAa,CAAC;AAAA,EAC5D;AAAA,EACA,IAAI,KAAK,OAAoB;AACzB,IAAK,cAAQ,gBAAgB,MAAM,GAAG,KAAK;AAAA,EAC/C;AAAA,EACA,IAAI,WAAW;AACX,WAAY,cAAQ,SAAS,MAAM,CAAC,KAAK;AAAA,EAC7C;AAAA,EACA,OAAO,WAAW,MAGC;AACf,UAAM,UAAU,IAAI,gBAAe,CAAC,CAAC;AACrC,QAAI,KAAK,SAAS,MAAM;AACpB,cAAQ,QAAQ,KAAK;AAAA,IACzB;AACA,QAAI,KAAK,QAAQ,MAAM;AACnB,cAAQ,OAAO,YAAY,WAAW,KAAK,IAAI;AAAA,IACnD;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAGF,CAAC;AACL,QAAI,KAAK,SAAS,MAAM;AACpB,WAAK,QAAQ,KAAK;AAAA,IACtB;AACA,QAAI,KAAK,QAAQ,MAAM;AACnB,WAAK,OAAO,KAAK,KAAK,SAAS;AAAA,IACnC;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,mBAAa;AAC1C,QAAI,KAAK,SAAS;AACd,aAAO,YAAY,GAAG,KAAK,KAAK;AACpC,QAAI,KAAK;AACL,aAAO,aAAa,GAAG,KAAK,MAAM,MAAM,KAAK,KAAK,UAAU,MAAM,CAAC;AACvE,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAAuD;AACtE,UAAM,SAAS,iBAAsB,qBAAe,QAAQ,IAAS,mBAAa,KAAK,GAAG,UAAU,IAAI,gBAAe;AACvH,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,kBAAQ,QAAQ,OAAO,WAAW;AAClC;AAAA,QACJ,KAAK;AACD,iBAAO,YAAY,QAAQ,MAAM,MAAM,QAAQ,OAAO,YAAY,YAAY,MAAM,CAAC;AACrF;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAAmC;AACxD,WAAO,gBAAe,YAAY,KAAK;AAAA,EAC3C;AACJ;AA3FIA,iBAAA;AADG,IAAM,iBAAN;AAx2BP,IAAAA;AAq8BO,IAAM,sBAAN,MAAM,4BAAgC,cAAQ;AAAA,EAEjD,YAAY,MAGT;AACC,UAAM;AALV,uBAAAA,gBAA4B,CAAC;AAMzB,IAAK,cAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,mBAAKA,eAAa;AAC5F,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,WAAW,QAAQ,KAAK,SAAS,QAAW;AAC5C,aAAK,QAAQ,KAAK;AAAA,MACtB;AACA,UAAI,UAAU,QAAQ,KAAK,QAAQ,QAAW;AAC1C,aAAK,OAAO,KAAK;AAAA,MACrB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,QAAQ;AACR,WAAY,cAAQ,oBAAoB,MAAM,GAAG,CAAC;AAAA,EACtD;AAAA,EACA,IAAI,MAAM,OAAe;AACrB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,OAAO;AACP,WAAY,cAAQ,gBAAgB,MAAM,iBAAiB,CAAC;AAAA,EAChE;AAAA,EACA,IAAI,KAAK,OAAwB;AAC7B,IAAK,cAAQ,gBAAgB,MAAM,GAAG,KAAK;AAAA,EAC/C;AAAA,EACA,IAAI,WAAW;AACX,WAAY,cAAQ,SAAS,MAAM,CAAC,KAAK;AAAA,EAC7C;AAAA,EACA,OAAO,WAAW,MAGK;AACnB,UAAM,UAAU,IAAI,oBAAmB,CAAC,CAAC;AACzC,QAAI,KAAK,SAAS,MAAM;AACpB,cAAQ,QAAQ,KAAK;AAAA,IACzB;AACA,QAAI,KAAK,QAAQ,MAAM;AACnB,cAAQ,OAAO,gBAAgB,WAAW,KAAK,IAAI;AAAA,IACvD;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAGF,CAAC;AACL,QAAI,KAAK,SAAS,MAAM;AACpB,WAAK,QAAQ,KAAK;AAAA,IACtB;AACA,QAAI,KAAK,QAAQ,MAAM;AACnB,WAAK,OAAO,KAAK,KAAK,SAAS;AAAA,IACnC;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,mBAAa;AAC1C,QAAI,KAAK,SAAS;AACd,aAAO,YAAY,GAAG,KAAK,KAAK;AACpC,QAAI,KAAK;AACL,aAAO,aAAa,GAAG,KAAK,MAAM,MAAM,KAAK,KAAK,UAAU,MAAM,CAAC;AACvE,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAA2D;AAC1E,UAAM,SAAS,iBAAsB,qBAAe,QAAQ,IAAS,mBAAa,KAAK,GAAG,UAAU,IAAI,oBAAmB;AAC3H,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,kBAAQ,QAAQ,OAAO,WAAW;AAClC;AAAA,QACJ,KAAK;AACD,iBAAO,YAAY,QAAQ,MAAM,MAAM,QAAQ,OAAO,gBAAgB,YAAY,MAAM,CAAC;AACzF;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAAuC;AAC5D,WAAO,oBAAmB,YAAY,KAAK;AAAA,EAC/C;AACJ;AA3FIA,iBAAA;AADG,IAAM,qBAAN;;;AC77BP,IAAAC,QAAsB;AACtB,aAAwB;AACjB,IAAK,UAAL,kBAAKC,aAAL;AACH,EAAAA,kBAAA,qBAAkB,KAAlB;AACA,EAAAA,kBAAA,mBAAgB,KAAhB;AACA,EAAAA,kBAAA,yBAAsB,KAAtB;AACA,EAAAA,kBAAA,gCAA6B,KAA7B;AACA,EAAAA,kBAAA,2BAAwB,KAAxB;AALQ,SAAAA;AAAA,GAAA;AAVZ,IAAAC;AAiBO,IAAM,gBAAN,MAAM,sBAA0B,cAAQ;AAAA,EAE3C,YAAY,MAKT;AACC,UAAM;AAPV,uBAAAA,iBAA4B,CAAC;AAQzB,IAAK,cAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,mBAAKA,gBAAa;AACnG,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,cAAc,QAAQ,KAAK,YAAY,QAAW;AAClD,aAAK,WAAW,KAAK;AAAA,MACzB;AACA,UAAI,cAAc,QAAQ,KAAK,YAAY,QAAW;AAClD,aAAK,WAAW,KAAK;AAAA,MACzB;AACA,UAAI,kBAAkB,QAAQ,KAAK,gBAAgB,QAAW;AAC1D,aAAK,eAAe,KAAK;AAAA,MAC7B;AACA,UAAI,kBAAkB,QAAQ,KAAK,gBAAgB,QAAW;AAC1D,aAAK,eAAe,KAAK;AAAA,MAC7B;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,WAAW;AACX,WAAY,cAAQ,wBAAwB,MAAmB,gBAAgB,CAAC;AAAA,EACpF;AAAA,EACA,IAAI,SAAS,OAAsC;AAC/C,IAAK,cAAQ,wBAAwB,MAAM,GAAG,KAAK;AAAA,EACvD;AAAA,EACA,IAAI,WAAW;AACX,WAAY,cAAQ,wBAAwB,MAAmB,gBAAgB,CAAC;AAAA,EACpF;AAAA,EACA,IAAI,SAAS,OAAsC;AAC/C,IAAK,cAAQ,wBAAwB,MAAM,GAAG,KAAK;AAAA,EACvD;AAAA,EACA,IAAI,eAAe;AACf,WAAY,cAAQ,wBAAwB,MAAmB,oBAAoB,CAAC;AAAA,EACxF;AAAA,EACA,IAAI,aAAa,OAA0C;AACvD,IAAK,cAAQ,wBAAwB,MAAM,GAAG,KAAK;AAAA,EACvD;AAAA,EACA,IAAI,eAAe;AACf,WAAY,cAAQ,gBAAgB,MAAmB,aAAa,CAAC;AAAA,EACzE;AAAA,EACA,IAAI,aAAa,OAAiC;AAC9C,IAAK,cAAQ,gBAAgB,MAAM,GAAG,KAAK;AAAA,EAC/C;AAAA,EACA,IAAI,mBAAmB;AACnB,WAAY,cAAQ,SAAS,MAAM,CAAC,KAAK;AAAA,EAC7C;AAAA,EACA,OAAO,WAAW,MAKD;AACb,UAAM,UAAU,IAAI,cAAa,CAAC,CAAC;AACnC,QAAI,KAAK,YAAY,MAAM;AACvB,cAAQ,WAAW,KAAK,SAAS,IAAI,UAAqB,eAAe,WAAW,IAAI,CAAC;AAAA,IAC7F;AACA,QAAI,KAAK,YAAY,MAAM;AACvB,cAAQ,WAAW,KAAK,SAAS,IAAI,UAAqB,eAAe,WAAW,IAAI,CAAC;AAAA,IAC7F;AACA,QAAI,KAAK,gBAAgB,MAAM;AAC3B,cAAQ,eAAe,KAAK,aAAa,IAAI,UAAqB,mBAAmB,WAAW,IAAI,CAAC;AAAA,IACzG;AACA,QAAI,KAAK,gBAAgB,MAAM;AAC3B,cAAQ,eAA4B,YAAY,WAAW,KAAK,YAAY;AAAA,IAChF;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAKF,CAAC;AACL,QAAI,KAAK,YAAY,MAAM;AACvB,WAAK,WAAW,KAAK,SAAS,IAAI,CAAC,SAAsC,KAAK,SAAS,CAAC;AAAA,IAC5F;AACA,QAAI,KAAK,YAAY,MAAM;AACvB,WAAK,WAAW,KAAK,SAAS,IAAI,CAAC,SAAsC,KAAK,SAAS,CAAC;AAAA,IAC5F;AACA,QAAI,KAAK,gBAAgB,MAAM;AAC3B,WAAK,eAAe,KAAK,aAAa,IAAI,CAAC,SAA0C,KAAK,SAAS,CAAC;AAAA,IACxG;AACA,QAAI,KAAK,gBAAgB,MAAM;AAC3B,WAAK,eAAe,KAAK,aAAa,SAAS;AAAA,IACnD;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,mBAAa;AAC1C,QAAI,KAAK,SAAS;AACd,aAAO,qBAAqB,GAAG,KAAK,UAAU,CAAC,SAAsC,KAAK,UAAU,MAAM,CAAC;AAC/G,QAAI,KAAK,SAAS;AACd,aAAO,qBAAqB,GAAG,KAAK,UAAU,CAAC,SAAsC,KAAK,UAAU,MAAM,CAAC;AAC/G,QAAI,KAAK,aAAa;AAClB,aAAO,qBAAqB,GAAG,KAAK,cAAc,CAAC,SAA0C,KAAK,UAAU,MAAM,CAAC;AACvH,QAAI,KAAK;AACL,aAAO,aAAa,GAAG,KAAK,cAAc,MAAM,KAAK,aAAa,UAAU,MAAM,CAAC;AACvF,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAAqD;AACpE,UAAM,SAAS,iBAAsB,qBAAe,QAAQ,IAAS,mBAAa,KAAK,GAAG,UAAU,IAAI,cAAa;AACrH,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,iBAAO,YAAY,QAAQ,UAAU,MAAW,cAAQ,0BAA0B,SAAS,GAAgB,eAAe,YAAY,MAAM,GAAgB,cAAc,CAAC;AAC3K;AAAA,QACJ,KAAK;AACD,iBAAO,YAAY,QAAQ,UAAU,MAAW,cAAQ,0BAA0B,SAAS,GAAgB,eAAe,YAAY,MAAM,GAAgB,cAAc,CAAC;AAC3K;AAAA,QACJ,KAAK;AACD,iBAAO,YAAY,QAAQ,cAAc,MAAW,cAAQ,0BAA0B,SAAS,GAAgB,mBAAmB,YAAY,MAAM,GAAgB,kBAAkB,CAAC;AACvL;AAAA,QACJ,KAAK;AACD,iBAAO,YAAY,QAAQ,cAAc,MAAM,QAAQ,eAA4B,YAAY,YAAY,MAAM,CAAC;AAClH;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAAiC;AACtD,WAAO,cAAa,YAAY,KAAK;AAAA,EACzC;AACJ;AAzIIA,kBAAA;AADG,IAAM,eAAN;AAjBP,IAAAA;AA4JO,IAAM,iBAAN,MAAM,uBAA2B,cAAQ;AAAA,EAE5C,YAAY,MAIT;AACC,UAAM;AANV,uBAAAA,iBAA4B,CAAC;AAOzB,IAAK,cAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,mBAAKA,gBAAa;AAC5F,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,SAAS,QAAQ,KAAK,OAAO,QAAW;AACxC,aAAK,MAAM,KAAK;AAAA,MACpB;AACA,UAAI,WAAW,QAAQ,KAAK,SAAS,QAAW;AAC5C,aAAK,QAAQ,KAAK;AAAA,MACtB;AACA,UAAI,kBAAkB,QAAQ,KAAK,gBAAgB,QAAW;AAC1D,aAAK,eAAe,KAAK;AAAA,MAC7B;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,MAAM;AACN,WAAY,cAAQ,gBAAgB,MAAM,KAAK,CAAC;AAAA,EACpD;AAAA,EACA,IAAI,IAAI,OAAY;AAChB,IAAK,cAAQ,gBAAgB,MAAM,GAAG,KAAK;AAAA,EAC/C;AAAA,EACA,IAAI,UAAU;AACV,WAAY,cAAQ,SAAS,MAAM,CAAC,KAAK;AAAA,EAC7C;AAAA,EACA,IAAI,QAAQ;AACR,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,MAAM,OAAe;AACrB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,eAAe;AACf,WAAY,cAAQ,gBAAgB,MAAmB,gBAAgB,CAAC;AAAA,EAC5E;AAAA,EACA,IAAI,aAAa,OAAoC;AACjD,IAAK,cAAQ,gBAAgB,MAAM,GAAG,KAAK;AAAA,EAC/C;AAAA,EACA,IAAI,mBAAmB;AACnB,WAAY,cAAQ,SAAS,MAAM,CAAC,KAAK;AAAA,EAC7C;AAAA,EACA,OAAO,WAAW,MAIA;AACd,UAAM,UAAU,IAAI,eAAc,CAAC,CAAC;AACpC,QAAI,KAAK,OAAO,MAAM;AAClB,cAAQ,MAAM,IAAI,WAAW,KAAK,GAAG;AAAA,IACzC;AACA,QAAI,KAAK,SAAS,MAAM;AACpB,cAAQ,QAAQ,KAAK;AAAA,IACzB;AACA,QAAI,KAAK,gBAAgB,MAAM;AAC3B,cAAQ,eAA4B,eAAe,WAAW,KAAK,YAAY;AAAA,IACnF;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAIF,CAAC;AACL,QAAI,KAAK,OAAO,MAAM;AAClB,WAAK,MAAM,KAAK,IAAI,SAAS;AAAA,IACjC;AACA,QAAI,KAAK,SAAS,MAAM;AACpB,WAAK,QAAQ,KAAK;AAAA,IACtB;AACA,QAAI,KAAK,gBAAgB,MAAM;AAC3B,WAAK,eAAe,KAAK,aAAa,SAAS;AAAA,IACnD;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,mBAAa;AAC1C,QAAI,KAAK;AACL,aAAO,aAAa,GAAG,KAAK,KAAK,MAAM,KAAK,IAAI,UAAU,MAAM,CAAC;AACrE,QAAI,KAAK,MAAM;AACX,aAAO,YAAY,GAAG,KAAK,KAAK;AACpC,QAAI,KAAK;AACL,aAAO,aAAa,GAAG,KAAK,cAAc,MAAM,KAAK,aAAa,UAAU,MAAM,CAAC;AACvF,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAAsD;AACrE,UAAM,SAAS,iBAAsB,qBAAe,QAAQ,IAAS,mBAAa,KAAK,GAAG,UAAU,IAAI,eAAc;AACtH,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,iBAAO,YAAY,QAAQ,KAAK,MAAM,QAAQ,MAAM,IAAI,YAAY,MAAM,CAAC;AAC3E;AAAA,QACJ,KAAK;AACD,kBAAQ,QAAQ,OAAO,WAAW;AAClC;AAAA,QACJ,KAAK;AACD,iBAAO,YAAY,QAAQ,cAAc,MAAM,QAAQ,eAA4B,eAAe,YAAY,MAAM,CAAC;AACrH;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAAkC;AACvD,WAAO,eAAc,YAAY,KAAK;AAAA,EAC1C;AACJ;AArHIA,kBAAA;AADG,IAAM,gBAAN;AA5JP,IAAAA;AAmRO,IAAM,sBAAN,MAAM,4BAAgC,cAAQ;AAAA,EAEjD,YAAY,MAIT;AACC,UAAM;AANV,uBAAAA,iBAA4B,CAAC;AAOzB,IAAK,cAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,mBAAKA,gBAAa;AAC5F,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,SAAS,QAAQ,KAAK,OAAO,QAAW;AACxC,aAAK,MAAM,KAAK;AAAA,MACpB;AACA,UAAI,cAAc,QAAQ,KAAK,YAAY,QAAW;AAClD,aAAK,WAAW,KAAK;AAAA,MACzB;AACA,UAAI,kBAAkB,QAAQ,KAAK,gBAAgB,QAAW;AAC1D,aAAK,eAAe,KAAK;AAAA,MAC7B;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,MAAM;AACN,WAAY,cAAQ,gBAAgB,MAAM,KAAK,CAAC;AAAA,EACpD;AAAA,EACA,IAAI,IAAI,OAAY;AAChB,IAAK,cAAQ,gBAAgB,MAAM,GAAG,KAAK;AAAA,EAC/C;AAAA,EACA,IAAI,UAAU;AACV,WAAY,cAAQ,SAAS,MAAM,CAAC,KAAK;AAAA,EAC7C;AAAA,EACA,IAAI,WAAW;AACX,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,SAAS,OAAe;AACxB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,eAAe;AACf,WAAY,cAAQ,gBAAgB,MAAmB,gBAAgB,CAAC;AAAA,EAC5E;AAAA,EACA,IAAI,aAAa,OAAoC;AACjD,IAAK,cAAQ,gBAAgB,MAAM,GAAG,KAAK;AAAA,EAC/C;AAAA,EACA,IAAI,mBAAmB;AACnB,WAAY,cAAQ,SAAS,MAAM,CAAC,KAAK;AAAA,EAC7C;AAAA,EACA,OAAO,WAAW,MAIK;AACnB,UAAM,UAAU,IAAI,oBAAmB,CAAC,CAAC;AACzC,QAAI,KAAK,OAAO,MAAM;AAClB,cAAQ,MAAM,IAAI,WAAW,KAAK,GAAG;AAAA,IACzC;AACA,QAAI,KAAK,YAAY,MAAM;AACvB,cAAQ,WAAW,KAAK;AAAA,IAC5B;AACA,QAAI,KAAK,gBAAgB,MAAM;AAC3B,cAAQ,eAA4B,eAAe,WAAW,KAAK,YAAY;AAAA,IACnF;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAIF,CAAC;AACL,QAAI,KAAK,OAAO,MAAM;AAClB,WAAK,MAAM,KAAK,IAAI,SAAS;AAAA,IACjC;AACA,QAAI,KAAK,YAAY,MAAM;AACvB,WAAK,WAAW,KAAK;AAAA,IACzB;AACA,QAAI,KAAK,gBAAgB,MAAM;AAC3B,WAAK,eAAe,KAAK,aAAa,SAAS;AAAA,IACnD;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,mBAAa;AAC1C,QAAI,KAAK;AACL,aAAO,aAAa,GAAG,KAAK,KAAK,MAAM,KAAK,IAAI,UAAU,MAAM,CAAC;AACrE,QAAI,KAAK,SAAS;AACd,aAAO,YAAY,GAAG,KAAK,QAAQ;AACvC,QAAI,KAAK;AACL,aAAO,aAAa,GAAG,KAAK,cAAc,MAAM,KAAK,aAAa,UAAU,MAAM,CAAC;AACvF,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAA2D;AAC1E,UAAM,SAAS,iBAAsB,qBAAe,QAAQ,IAAS,mBAAa,KAAK,GAAG,UAAU,IAAI,oBAAmB;AAC3H,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,iBAAO,YAAY,QAAQ,KAAK,MAAM,QAAQ,MAAM,IAAI,YAAY,MAAM,CAAC;AAC3E;AAAA,QACJ,KAAK;AACD,kBAAQ,WAAW,OAAO,WAAW;AACrC;AAAA,QACJ,KAAK;AACD,iBAAO,YAAY,QAAQ,cAAc,MAAM,QAAQ,eAA4B,eAAe,YAAY,MAAM,CAAC;AACrH;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAAuC;AAC5D,WAAO,oBAAmB,YAAY,KAAK;AAAA,EAC/C;AACJ;AArHIA,kBAAA;AADG,IAAM,qBAAN;AAnRP,IAAAA;AA0YO,IAAM,mBAAN,MAAM,yBAA6B,cAAQ;AAAA,EAE9C,YAAY,MAET;AACC,UAAM;AAJV,uBAAAA,iBAA4B,CAAC;AAKzB,IAAK,cAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,mBAAKA,gBAAa;AAC5F,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,cAAc,QAAQ,KAAK,YAAY,QAAW;AAClD,aAAK,WAAW,KAAK;AAAA,MACzB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,WAAW;AACX,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,SAAS,OAAe;AACxB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,OAAO,WAAW,MAEE;AAChB,UAAM,UAAU,IAAI,iBAAgB,CAAC,CAAC;AACtC,QAAI,KAAK,YAAY,MAAM;AACvB,cAAQ,WAAW,KAAK;AAAA,IAC5B;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAEF,CAAC;AACL,QAAI,KAAK,YAAY,MAAM;AACvB,WAAK,WAAW,KAAK;AAAA,IACzB;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,mBAAa;AAC1C,QAAI,KAAK,SAAS;AACd,aAAO,YAAY,GAAG,KAAK,QAAQ;AACvC,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAAwD;AACvE,UAAM,SAAS,iBAAsB,qBAAe,QAAQ,IAAS,mBAAa,KAAK,GAAG,UAAU,IAAI,iBAAgB;AACxH,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,kBAAQ,WAAW,OAAO,WAAW;AACrC;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAAoC;AACzD,WAAO,iBAAgB,YAAY,KAAK;AAAA,EAC5C;AACJ;AAjEIA,kBAAA;AADG,IAAM,kBAAN;AA1YP,IAAAA;AA6cO,IAAM,oBAAN,MAAM,0BAA8B,cAAQ;AAAA,EAE/C,YAAY,MAGT;AACC,UAAM;AALV,uBAAAA,iBAA4B,CAAC;AAMzB,IAAK,cAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,mBAAKA,gBAAa;AAC5F,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,SAAS,QAAQ,KAAK,OAAO,QAAW;AACxC,aAAK,MAAM,KAAK;AAAA,MACpB;AACA,UAAI,WAAW,QAAQ,KAAK,SAAS,QAAW;AAC5C,aAAK,QAAQ,KAAK;AAAA,MACtB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,MAAM;AACN,WAAY,cAAQ,gBAAgB,MAAM,KAAK,CAAC;AAAA,EACpD;AAAA,EACA,IAAI,IAAI,OAAY;AAChB,IAAK,cAAQ,gBAAgB,MAAM,GAAG,KAAK;AAAA,EAC/C;AAAA,EACA,IAAI,UAAU;AACV,WAAY,cAAQ,SAAS,MAAM,CAAC,KAAK;AAAA,EAC7C;AAAA,EACA,IAAI,QAAQ;AACR,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,MAAM,OAAe;AACrB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,OAAO,WAAW,MAGG;AACjB,UAAM,UAAU,IAAI,kBAAiB,CAAC,CAAC;AACvC,QAAI,KAAK,OAAO,MAAM;AAClB,cAAQ,MAAM,IAAI,WAAW,KAAK,GAAG;AAAA,IACzC;AACA,QAAI,KAAK,SAAS,MAAM;AACpB,cAAQ,QAAQ,KAAK;AAAA,IACzB;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAGF,CAAC;AACL,QAAI,KAAK,OAAO,MAAM;AAClB,WAAK,MAAM,KAAK,IAAI,SAAS;AAAA,IACjC;AACA,QAAI,KAAK,SAAS,MAAM;AACpB,WAAK,QAAQ,KAAK;AAAA,IACtB;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,mBAAa;AAC1C,QAAI,KAAK;AACL,aAAO,aAAa,GAAG,KAAK,KAAK,MAAM,KAAK,IAAI,UAAU,MAAM,CAAC;AACrE,QAAI,KAAK,MAAM;AACX,aAAO,YAAY,GAAG,KAAK,KAAK;AACpC,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAAyD;AACxE,UAAM,SAAS,iBAAsB,qBAAe,QAAQ,IAAS,mBAAa,KAAK,GAAG,UAAU,IAAI,kBAAiB;AACzH,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,iBAAO,YAAY,QAAQ,KAAK,MAAM,QAAQ,MAAM,IAAI,YAAY,MAAM,CAAC;AAC3E;AAAA,QACJ,KAAK;AACD,kBAAQ,QAAQ,OAAO,WAAW;AAClC;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAAqC;AAC1D,WAAO,kBAAiB,YAAY,KAAK;AAAA,EAC7C;AACJ;AA3FIA,kBAAA;AADG,IAAM,mBAAN;AA7cP,IAAAA;AA0iBO,IAAM,OAAN,MAAM,aAAiB,cAAQ;AAAA,EAElC,YAAY,MAGT;AACC,UAAM;AALV,uBAAAA,iBAA4B,CAAC;AAMzB,IAAK,cAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,mBAAKA,gBAAa;AAC5F,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,UAAU,QAAQ,KAAK,QAAQ,QAAW;AAC1C,aAAK,OAAO,KAAK;AAAA,MACrB;AACA,UAAI,SAAS,QAAQ,KAAK,OAAO,QAAW;AACxC,aAAK,MAAM,KAAK;AAAA,MACpB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,OAAO;AACP,WAAY,cAAQ,oBAAoB,MAAM,GAAG,uBAAuB;AAAA,EAC5E;AAAA,EACA,IAAI,KAAK,OAAgB;AACrB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,MAAM;AACN,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,IAAI,OAAe;AACnB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,OAAO,WAAW,MAGV;AACJ,UAAM,UAAU,IAAI,KAAI,CAAC,CAAC;AAC1B,QAAI,KAAK,QAAQ,MAAM;AACnB,cAAQ,OAAO,KAAK;AAAA,IACxB;AACA,QAAI,KAAK,OAAO,MAAM;AAClB,cAAQ,MAAM,KAAK;AAAA,IACvB;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAGF,CAAC;AACL,QAAI,KAAK,QAAQ,MAAM;AACnB,WAAK,OAAO,KAAK;AAAA,IACrB;AACA,QAAI,KAAK,OAAO,MAAM;AAClB,WAAK,MAAM,KAAK;AAAA,IACpB;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,mBAAa;AAC1C,QAAI,KAAK,QAAQ;AACb,aAAO,UAAU,GAAG,KAAK,IAAI;AACjC,QAAI,KAAK,IAAI;AACT,aAAO,YAAY,GAAG,KAAK,GAAG;AAClC,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAA4C;AAC3D,UAAM,SAAS,iBAAsB,qBAAe,QAAQ,IAAS,mBAAa,KAAK,GAAG,UAAU,IAAI,KAAI;AAC5G,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,kBAAQ,OAAO,OAAO,SAAS;AAC/B;AAAA,QACJ,KAAK;AACD,kBAAQ,MAAM,OAAO,WAAW;AAChC;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAAwB;AAC7C,WAAO,KAAI,YAAY,KAAK;AAAA,EAChC;AACJ;AAxFIA,kBAAA;AADG,IAAM,MAAN;AAkHA,IAAe,6BAAf,MAA0C;AAkCjD;AAlCsB,2BACX,aAAa;AAAA,EAChB,OAAO;AAAA,IACH,MAAM;AAAA,IACN,eAAe;AAAA,IACf,gBAAgB;AAAA,IAChB,kBAAkB,CAAC,YAA0B,OAAO,KAAK,QAAQ,UAAU,CAAC;AAAA,IAC5E,oBAAoB,CAAC,UAAkB,aAAa,YAAY,IAAI,WAAW,KAAK,CAAC;AAAA,IACrF,mBAAmB,CAAC,YAA2B,OAAO,KAAK,QAAQ,UAAU,CAAC;AAAA,IAC9E,qBAAqB,CAAC,UAAkB,cAAc,YAAY,IAAI,WAAW,KAAK,CAAC;AAAA,EAC3F;AAAA,EACA,YAAY;AAAA,IACR,MAAM;AAAA,IACN,eAAe;AAAA,IACf,gBAAgB;AAAA,IAChB,kBAAkB,CAAC,YAA0B,OAAO,KAAK,QAAQ,UAAU,CAAC;AAAA,IAC5E,oBAAoB,CAAC,UAAkB,aAAa,YAAY,IAAI,WAAW,KAAK,CAAC;AAAA,IACrF,mBAAmB,CAAC,YAAgC,OAAO,KAAK,QAAQ,UAAU,CAAC;AAAA,IACnF,qBAAqB,CAAC,UAAkB,mBAAmB,YAAY,IAAI,WAAW,KAAK,CAAC;AAAA,EAChG;AAAA,EACA,UAAU;AAAA,IACN,MAAM;AAAA,IACN,eAAe;AAAA,IACf,gBAAgB;AAAA,IAChB,kBAAkB,CAAC,YAA6B,OAAO,KAAK,QAAQ,UAAU,CAAC;AAAA,IAC/E,oBAAoB,CAAC,UAAkB,gBAAgB,YAAY,IAAI,WAAW,KAAK,CAAC;AAAA,IACxF,mBAAmB,CAAC,YAA8B,OAAO,KAAK,QAAQ,UAAU,CAAC;AAAA,IACjF,qBAAqB,CAAC,UAAkB,iBAAiB,YAAY,IAAI,WAAW,KAAK,CAAC;AAAA,EAC9F;AACJ;AAMG,IAAM,eAAN,cAAkC,oCAA6B,2BAA2B,YAAY,UAAU,CAAC,CAAC,EAAE;AAAA,EACvH,YAAY,SAAiBC,cAAwC,SAA0C;AAC3G,UAAM,SAASA,cAAa,OAAO;AAEvC,iBAAkE,CAAC,SAAuB,UAAiD,YAAyD;AAAE,UAAI,CAAC,UAAU;AACjN,mBAAW,IAAW;AAAA,MAC1B;AAAE,UAAI,CAAC,SAAS;AACZ,kBAAU,CAAC;AAAA,MACf;AAAE,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW,MAAM,MAAM,SAAS,UAAU,SAAS,CAAC,OAA4B,aAA4B;AACvI,YAAI,OAAO;AACP,iBAAO,KAAK;AAAA,QAChB,OACK;AACD,kBAAQ,QAAQ;AAAA,QACpB;AAAA,MACJ,CAAC,CAAC;AAAA,IAAG;AACL,sBAA4E,CAAC,SAAuB,UAAiD,YAA8D;AAAE,UAAI,CAAC,UAAU;AAChO,mBAAW,IAAW;AAAA,MAC1B;AAAE,UAAI,CAAC,SAAS;AACZ,kBAAU,CAAC;AAAA,MACf;AAAE,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW,MAAM,WAAW,SAAS,UAAU,SAAS,CAAC,OAA4B,aAAiC;AACjJ,YAAI,OAAO;AACP,iBAAO,KAAK;AAAA,QAChB,OACK;AACD,kBAAQ,QAAQ;AAAA,QACpB;AAAA,MACJ,CAAC,CAAC;AAAA,IAAG;AACL,oBAA2E,CAAC,SAA0B,UAAiD,YAA4D;AAAE,UAAI,CAAC,UAAU;AAChO,mBAAW,IAAW;AAAA,MAC1B;AAAE,UAAI,CAAC,SAAS;AACZ,kBAAU,CAAC;AAAA,MACf;AAAE,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW,MAAM,SAAS,SAAS,UAAU,SAAS,CAAC,OAA4B,aAA+B;AAC7I,YAAI,OAAO;AACP,iBAAO,KAAK;AAAA,QAChB,OACK;AACD,kBAAQ,QAAQ;AAAA,QACpB;AAAA,MACJ,CAAC,CAAC;AAAA,IAAG;AAAA,EApCL;AAqCJ;;;ACvuBA,qBAA4B;;;ACK5B,IAAAC,QAAsB;AALtB,IAAAC;AAMO,IAAM,eAAN,MAAM,qBAAyB,cAAQ;AAAA,EAE1C,YAAY,MAKT;AACC,UAAM;AAPV,uBAAAA,iBAA4B,CAAC;AAQzB,IAAK,cAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,GAAG,mBAAKA,gBAAa;AAC7F,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,sBAAsB,QAAQ,KAAK,oBAAoB,QAAW;AAClE,aAAK,mBAAmB,KAAK;AAAA,MACjC;AACA,UAAI,uBAAuB,QAAQ,KAAK,qBAAqB,QAAW;AACpE,aAAK,oBAAoB,KAAK;AAAA,MAClC;AACA,UAAI,aAAa,QAAQ,KAAK,WAAW,QAAW;AAChD,aAAK,UAAU,KAAK;AAAA,MACxB;AACA,UAAI,mBAAmB,QAAQ,KAAK,iBAAiB,QAAW;AAC5D,aAAK,gBAAgB,KAAK;AAAA,MAC9B;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,mBAAmB;AACnB,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,iBAAiB,OAAe;AAChC,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,oBAAoB;AACpB,WAAY,cAAQ,wBAAwB,MAAM,gBAAgB,CAAC;AAAA,EACvE;AAAA,EACA,IAAI,kBAAkB,OAAyB;AAC3C,IAAK,cAAQ,wBAAwB,MAAM,GAAG,KAAK;AAAA,EACvD;AAAA,EACA,IAAI,UAAU;AACV,WAAY,cAAQ,oBAAoB,MAAM,GAAG,CAAC;AAAA,EACtD;AAAA,EACA,IAAI,QAAQ,OAAe;AACvB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,gBAAgB;AAChB,WAAY,cAAQ,oBAAoB,MAAM,GAAG,CAAC;AAAA,EACtD;AAAA,EACA,IAAI,cAAc,OAAe;AAC7B,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,OAAO,WAAW,MAKF;AACZ,UAAM,UAAU,IAAI,aAAY,CAAC,CAAC;AAClC,QAAI,KAAK,oBAAoB,MAAM;AAC/B,cAAQ,mBAAmB,KAAK;AAAA,IACpC;AACA,QAAI,KAAK,qBAAqB,MAAM;AAChC,cAAQ,oBAAoB,KAAK,kBAAkB,IAAI,UAAQ,eAAe,WAAW,IAAI,CAAC;AAAA,IAClG;AACA,QAAI,KAAK,WAAW,MAAM;AACtB,cAAQ,UAAU,KAAK;AAAA,IAC3B;AACA,QAAI,KAAK,iBAAiB,MAAM;AAC5B,cAAQ,gBAAgB,KAAK;AAAA,IACjC;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAKF,CAAC;AACL,QAAI,KAAK,oBAAoB,MAAM;AAC/B,WAAK,mBAAmB,KAAK;AAAA,IACjC;AACA,QAAI,KAAK,qBAAqB,MAAM;AAChC,WAAK,oBAAoB,KAAK,kBAAkB,IAAI,CAAC,SAAyB,KAAK,SAAS,CAAC;AAAA,IACjG;AACA,QAAI,KAAK,WAAW,MAAM;AACtB,WAAK,UAAU,KAAK;AAAA,IACxB;AACA,QAAI,KAAK,iBAAiB,MAAM;AAC5B,WAAK,gBAAgB,KAAK;AAAA,IAC9B;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,mBAAa;AAC1C,QAAI,KAAK,iBAAiB;AACtB,aAAO,YAAY,GAAG,KAAK,gBAAgB;AAC/C,QAAI,KAAK,kBAAkB;AACvB,aAAO,qBAAqB,GAAG,KAAK,mBAAmB,CAAC,SAAyB,KAAK,UAAU,MAAM,CAAC;AAC3G,QAAI,KAAK,WAAW;AAChB,aAAO,YAAY,GAAG,KAAK,OAAO;AACtC,QAAI,KAAK,iBAAiB;AACtB,aAAO,YAAY,GAAG,KAAK,aAAa;AAC5C,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAAoD;AACnE,UAAM,SAAS,iBAAsB,qBAAe,QAAQ,IAAS,mBAAa,KAAK,GAAG,UAAU,IAAI,aAAY;AACpH,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,kBAAQ,mBAAmB,OAAO,WAAW;AAC7C;AAAA,QACJ,KAAK;AACD,iBAAO,YAAY,QAAQ,mBAAmB,MAAW,cAAQ,0BAA0B,SAAS,GAAG,eAAe,YAAY,MAAM,GAAG,cAAc,CAAC;AAC1J;AAAA,QACJ,KAAK;AACD,kBAAQ,UAAU,OAAO,WAAW;AACpC;AAAA,QACJ,KAAK;AACD,kBAAQ,gBAAgB,OAAO,WAAW;AAC1C;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAAgC;AACrD,WAAO,aAAY,YAAY,KAAK;AAAA,EACxC;AACJ;AAtIIA,kBAAA;AADG,IAAM,cAAN;AANP,IAAAA;AA8IO,IAAM,kBAAN,MAAM,wBAA4B,cAAQ;AAAA,EAE7C,YAAY,MAOT;AACC,UAAM;AATV,uBAAAA,iBAA4B,CAAC;AAUzB,IAAK,cAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,mBAAKA,gBAAa;AAC5F,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,sBAAsB,QAAQ,KAAK,oBAAoB,QAAW;AAClE,aAAK,mBAAmB,KAAK;AAAA,MACjC;AACA,UAAI,eAAe,QAAQ,KAAK,aAAa,QAAW;AACpD,aAAK,YAAY,KAAK;AAAA,MAC1B;AACA,UAAI,gBAAgB,QAAQ,KAAK,cAAc,QAAW;AACtD,aAAK,aAAa,KAAK;AAAA,MAC3B;AACA,UAAI,sBAAsB,QAAQ,KAAK,oBAAoB,QAAW;AAClE,aAAK,mBAAmB,KAAK;AAAA,MACjC;AACA,UAAI,iBAAiB,QAAQ,KAAK,eAAe,QAAW;AACxD,aAAK,cAAc,KAAK;AAAA,MAC5B;AACA,UAAI,WAAW,QAAQ,KAAK,SAAS,QAAW;AAC5C,aAAK,QAAQ,KAAK;AAAA,MACtB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,mBAAmB;AACnB,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,iBAAiB,OAAe;AAChC,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,YAAY;AACZ,WAAY,cAAQ,oBAAoB,MAAM,GAAG,CAAC;AAAA,EACtD;AAAA,EACA,IAAI,UAAU,OAAe;AACzB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,aAAa;AACb,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,WAAW,OAAe;AAC1B,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,mBAAmB;AACnB,WAAY,cAAQ,oBAAoB,MAAM,GAAG,KAAK;AAAA,EAC1D;AAAA,EACA,IAAI,iBAAiB,OAAgB;AACjC,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,cAAc;AACd,WAAY,cAAQ,oBAAoB,MAAM,GAAG,CAAC;AAAA,EACtD;AAAA,EACA,IAAI,YAAY,OAAe;AAC3B,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,QAAQ;AACR,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,MAAM,OAAe;AACrB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,OAAO,WAAW,MAOC;AACf,UAAM,UAAU,IAAI,gBAAe,CAAC,CAAC;AACrC,QAAI,KAAK,oBAAoB,MAAM;AAC/B,cAAQ,mBAAmB,KAAK;AAAA,IACpC;AACA,QAAI,KAAK,aAAa,MAAM;AACxB,cAAQ,YAAY,KAAK;AAAA,IAC7B;AACA,QAAI,KAAK,cAAc,MAAM;AACzB,cAAQ,aAAa,KAAK;AAAA,IAC9B;AACA,QAAI,KAAK,oBAAoB,MAAM;AAC/B,cAAQ,mBAAmB,KAAK;AAAA,IACpC;AACA,QAAI,KAAK,eAAe,MAAM;AAC1B,cAAQ,cAAc,KAAK;AAAA,IAC/B;AACA,QAAI,KAAK,SAAS,MAAM;AACpB,cAAQ,QAAQ,KAAK;AAAA,IACzB;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAOF,CAAC;AACL,QAAI,KAAK,oBAAoB,MAAM;AAC/B,WAAK,mBAAmB,KAAK;AAAA,IACjC;AACA,QAAI,KAAK,aAAa,MAAM;AACxB,WAAK,YAAY,KAAK;AAAA,IAC1B;AACA,QAAI,KAAK,cAAc,MAAM;AACzB,WAAK,aAAa,KAAK;AAAA,IAC3B;AACA,QAAI,KAAK,oBAAoB,MAAM;AAC/B,WAAK,mBAAmB,KAAK;AAAA,IACjC;AACA,QAAI,KAAK,eAAe,MAAM;AAC1B,WAAK,cAAc,KAAK;AAAA,IAC5B;AACA,QAAI,KAAK,SAAS,MAAM;AACpB,WAAK,QAAQ,KAAK;AAAA,IACtB;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,mBAAa;AAC1C,QAAI,KAAK,iBAAiB;AACtB,aAAO,YAAY,GAAG,KAAK,gBAAgB;AAC/C,QAAI,KAAK,aAAa;AAClB,aAAO,YAAY,GAAG,KAAK,SAAS;AACxC,QAAI,KAAK,WAAW;AAChB,aAAO,YAAY,GAAG,KAAK,UAAU;AACzC,QAAI,KAAK,oBAAoB;AACzB,aAAO,UAAU,GAAG,KAAK,gBAAgB;AAC7C,QAAI,KAAK,eAAe;AACpB,aAAO,YAAY,GAAG,KAAK,WAAW;AAC1C,QAAI,KAAK,MAAM;AACX,aAAO,YAAY,GAAG,KAAK,KAAK;AACpC,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAAuD;AACtE,UAAM,SAAS,iBAAsB,qBAAe,QAAQ,IAAS,mBAAa,KAAK,GAAG,UAAU,IAAI,gBAAe;AACvH,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,kBAAQ,mBAAmB,OAAO,WAAW;AAC7C;AAAA,QACJ,KAAK;AACD,kBAAQ,YAAY,OAAO,WAAW;AACtC;AAAA,QACJ,KAAK;AACD,kBAAQ,aAAa,OAAO,WAAW;AACvC;AAAA,QACJ,KAAK;AACD,kBAAQ,mBAAmB,OAAO,SAAS;AAC3C;AAAA,QACJ,KAAK;AACD,kBAAQ,cAAc,OAAO,WAAW;AACxC;AAAA,QACJ,KAAK;AACD,kBAAQ,QAAQ,OAAO,WAAW;AAClC;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAAmC;AACxD,WAAO,gBAAe,YAAY,KAAK;AAAA,EAC3C;AACJ;AApLIA,kBAAA;AADG,IAAM,iBAAN;AA9IP,IAAAA;AAoUO,IAAM,oBAAN,MAAM,0BAA8B,cAAQ;AAAA,EAE/C,YAAY,MAIT;AACC,UAAM;AANV,uBAAAA,iBAA4B,CAAC;AAOzB,IAAK,cAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,GAAG,mBAAKA,gBAAa;AAC7F,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,aAAa,QAAQ,KAAK,WAAW,QAAW;AAChD,aAAK,UAAU,KAAK;AAAA,MACxB;AACA,UAAI,kBAAkB,QAAQ,KAAK,gBAAgB,QAAW;AAC1D,aAAK,eAAe,KAAK;AAAA,MAC7B;AACA,UAAI,aAAa,QAAQ,KAAK,WAAW,QAAW;AAChD,aAAK,UAAU,KAAK;AAAA,MACxB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,UAAU;AACV,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,QAAQ,OAAe;AACvB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,eAAe;AACf,WAAY,cAAQ,oBAAoB,MAAM,GAAG,CAAC,CAAC;AAAA,EACvD;AAAA,EACA,IAAI,aAAa,OAAiB;AAC9B,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,UAAU;AACV,WAAY,cAAQ,oBAAoB,MAAM,GAAG,CAAC;AAAA,EACtD;AAAA,EACA,IAAI,QAAQ,OAAe;AACvB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,OAAO,WAAW,MAIG;AACjB,UAAM,UAAU,IAAI,kBAAiB,CAAC,CAAC;AACvC,QAAI,KAAK,WAAW,MAAM;AACtB,cAAQ,UAAU,KAAK;AAAA,IAC3B;AACA,QAAI,KAAK,gBAAgB,MAAM;AAC3B,cAAQ,eAAe,KAAK;AAAA,IAChC;AACA,QAAI,KAAK,WAAW,MAAM;AACtB,cAAQ,UAAU,KAAK;AAAA,IAC3B;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAIF,CAAC;AACL,QAAI,KAAK,WAAW,MAAM;AACtB,WAAK,UAAU,KAAK;AAAA,IACxB;AACA,QAAI,KAAK,gBAAgB,MAAM;AAC3B,WAAK,eAAe,KAAK;AAAA,IAC7B;AACA,QAAI,KAAK,WAAW,MAAM;AACtB,WAAK,UAAU,KAAK;AAAA,IACxB;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,mBAAa;AAC1C,QAAI,KAAK,QAAQ;AACb,aAAO,YAAY,GAAG,KAAK,OAAO;AACtC,QAAI,KAAK,aAAa;AAClB,aAAO,oBAAoB,GAAG,KAAK,YAAY;AACnD,QAAI,KAAK,WAAW;AAChB,aAAO,YAAY,GAAG,KAAK,OAAO;AACtC,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAAyD;AACxE,UAAM,SAAS,iBAAsB,qBAAe,QAAQ,IAAS,mBAAa,KAAK,GAAG,UAAU,IAAI,kBAAiB;AACzH,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,kBAAQ,UAAU,OAAO,WAAW;AACpC;AAAA,QACJ,KAAK;AACD,UAAK,cAAQ,mBAAmB,SAAS,GAAG,OAAO,WAAW,CAAC;AAC/D;AAAA,QACJ,KAAK;AACD,kBAAQ,UAAU,OAAO,WAAW;AACpC;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAAqC;AAC1D,WAAO,kBAAiB,YAAY,KAAK;AAAA,EAC7C;AACJ;AA/GIA,kBAAA;AADG,IAAM,mBAAN;AApUP,IAAAA;AAqbO,IAAM,mBAAN,MAAM,yBAA6B,cAAQ;AAAA,EAE9C,YAAY,MAET;AACC,UAAM;AAJV,uBAAAA,iBAA4B,CAAC;AAKzB,IAAK,cAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,mBAAKA,gBAAa;AAC5F,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,sBAAsB,QAAQ,KAAK,oBAAoB,QAAW;AAClE,aAAK,mBAAmB,KAAK;AAAA,MACjC;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,mBAAmB;AACnB,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,iBAAiB,OAAe;AAChC,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,OAAO,WAAW,MAEE;AAChB,UAAM,UAAU,IAAI,iBAAgB,CAAC,CAAC;AACtC,QAAI,KAAK,oBAAoB,MAAM;AAC/B,cAAQ,mBAAmB,KAAK;AAAA,IACpC;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAEF,CAAC;AACL,QAAI,KAAK,oBAAoB,MAAM;AAC/B,WAAK,mBAAmB,KAAK;AAAA,IACjC;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,mBAAa;AAC1C,QAAI,KAAK,iBAAiB;AACtB,aAAO,YAAY,GAAG,KAAK,gBAAgB;AAC/C,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAAwD;AACvE,UAAM,SAAS,iBAAsB,qBAAe,QAAQ,IAAS,mBAAa,KAAK,GAAG,UAAU,IAAI,iBAAgB;AACxH,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,kBAAQ,mBAAmB,OAAO,WAAW;AAC7C;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAAoC;AACzD,WAAO,iBAAgB,YAAY,KAAK;AAAA,EAC5C;AACJ;AAjEIA,kBAAA;AADG,IAAM,kBAAN;;;AC7aP,IAAAC,QAAsB;AACtB,IAAAC,UAAwB;AATxB,IAAAC;AA2BO,IAAM,UAAN,MAAM,gBAAoB,cAAQ;AAAA,EAErC,YAAY,MAGT;AACC,UAAM;AALV,uBAAAA,iBAA4B,CAAC;AAMzB,IAAK,cAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,mBAAKA,gBAAa;AAC5F,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,UAAU,QAAQ,KAAK,QAAQ,QAAW;AAC1C,aAAK,OAAO,KAAK;AAAA,MACrB;AACA,UAAI,SAAS,QAAQ,KAAK,OAAO,QAAW;AACxC,aAAK,MAAM,KAAK;AAAA,MACpB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,OAAO;AACP,WAAY,cAAQ,oBAAoB,MAAM,GAAG,4BAA4B;AAAA,EACjF;AAAA,EACA,IAAI,KAAK,OAAgB;AACrB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,MAAM;AACN,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,IAAI,OAAe;AACnB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,OAAO,WAAW,MAGP;AACP,UAAM,UAAU,IAAI,QAAO,CAAC,CAAC;AAC7B,QAAI,KAAK,QAAQ,MAAM;AACnB,cAAQ,OAAO,KAAK;AAAA,IACxB;AACA,QAAI,KAAK,OAAO,MAAM;AAClB,cAAQ,MAAM,KAAK;AAAA,IACvB;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAGF,CAAC;AACL,QAAI,KAAK,QAAQ,MAAM;AACnB,WAAK,OAAO,KAAK;AAAA,IACrB;AACA,QAAI,KAAK,OAAO,MAAM;AAClB,WAAK,MAAM,KAAK;AAAA,IACpB;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,mBAAa;AAC1C,QAAI,KAAK,QAAQ;AACb,aAAO,UAAU,GAAG,KAAK,IAAI;AACjC,QAAI,KAAK,IAAI;AACT,aAAO,YAAY,GAAG,KAAK,GAAG;AAClC,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAA+C;AAC9D,UAAM,SAAS,iBAAsB,qBAAe,QAAQ,IAAS,mBAAa,KAAK,GAAG,UAAU,IAAI,QAAO;AAC/G,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,kBAAQ,OAAO,OAAO,SAAS;AAC/B;AAAA,QACJ,KAAK;AACD,kBAAQ,MAAM,OAAO,WAAW;AAChC;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAA2B;AAChD,WAAO,QAAO,YAAY,KAAK;AAAA,EACnC;AACJ;AAxFIA,kBAAA;AADG,IAAM,SAAN;AA3BP,IAAAA;AAqHO,IAAM,uBAAN,MAAM,6BAAiC,cAAQ;AAAA,EAElD,YAAY,MAQT;AACC,UAAM;AAVV,uBAAAA,iBAA4B,CAAC;AAWzB,IAAK,cAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,mBAAKA,gBAAa;AACnG,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,cAAc,QAAQ,KAAK,YAAY,QAAW;AAClD,aAAK,WAAW,KAAK;AAAA,MACzB;AACA,UAAI,mBAAmB,QAAQ,KAAK,iBAAiB,QAAW;AAC5D,aAAK,gBAAgB,KAAK;AAAA,MAC9B;AACA,UAAI,yBAAyB,QAAQ,KAAK,uBAAuB,QAAW;AACxE,aAAK,sBAAsB,KAAK;AAAA,MACpC;AACA,UAAI,uBAAuB,QAAQ,KAAK,qBAAqB,QAAW;AACpE,aAAK,oBAAoB,KAAK;AAAA,MAClC;AACA,UAAI,sBAAsB,QAAQ,KAAK,oBAAoB,QAAW;AAClE,aAAK,mBAAmB,KAAK;AAAA,MACjC;AACA,UAAI,0BAA0B,QAAQ,KAAK,wBAAwB,QAAW;AAC1E,aAAK,uBAAuB,KAAK;AAAA,MACrC;AACA,UAAI,qBAAqB,QAAQ,KAAK,mBAAmB,QAAW;AAChE,aAAK,kBAAkB,KAAK;AAAA,MAChC;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,WAAW;AACX,WAAY,cAAQ,oBAAoB,MAAM,GAAG,CAAC;AAAA,EACtD;AAAA,EACA,IAAI,SAAS,OAAe;AACxB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,gBAAgB;AAChB,WAAY,cAAQ,wBAAwB,MAAmB,aAAa,CAAC;AAAA,EACjF;AAAA,EACA,IAAI,cAAc,OAAmC;AACjD,IAAK,cAAQ,wBAAwB,MAAM,GAAG,KAAK;AAAA,EACvD;AAAA,EACA,IAAI,sBAAsB;AACtB,WAAY,cAAQ,wBAAwB,MAAmB,kBAAkB,CAAC;AAAA,EACtF;AAAA,EACA,IAAI,oBAAoB,OAAwC;AAC5D,IAAK,cAAQ,wBAAwB,MAAM,GAAG,KAAK;AAAA,EACvD;AAAA,EACA,IAAI,oBAAoB;AACpB,WAAY,cAAQ,wBAAwB,MAAmB,iBAAiB,CAAC;AAAA,EACrF;AAAA,EACA,IAAI,kBAAkB,OAAuC;AACzD,IAAK,cAAQ,wBAAwB,MAAM,GAAG,KAAK;AAAA,EACvD;AAAA,EACA,IAAI,mBAAmB;AACnB,WAAY,cAAQ,gBAAgB,MAAmB,gBAAgB,CAAC;AAAA,EAC5E;AAAA,EACA,IAAI,iBAAiB,OAAoC;AACrD,IAAK,cAAQ,gBAAgB,MAAM,GAAG,KAAK;AAAA,EAC/C;AAAA,EACA,IAAI,uBAAuB;AACvB,WAAY,cAAQ,SAAS,MAAM,CAAC,KAAK;AAAA,EAC7C;AAAA,EACA,IAAI,uBAAuB;AACvB,WAAY,cAAQ,oBAAoB,MAAM,GAAG,KAAK;AAAA,EAC1D;AAAA,EACA,IAAI,qBAAqB,OAAgB;AACrC,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,kBAAkB;AAClB,WAAY,cAAQ,oBAAoB,MAAM,GAAG,CAAC;AAAA,EACtD;AAAA,EACA,IAAI,gBAAgB,OAAe;AAC/B,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,OAAO,WAAW,MAQM;AACpB,UAAM,UAAU,IAAI,qBAAoB,CAAC,CAAC;AAC1C,QAAI,KAAK,YAAY,MAAM;AACvB,cAAQ,WAAW,KAAK;AAAA,IAC5B;AACA,QAAI,KAAK,iBAAiB,MAAM;AAC5B,cAAQ,gBAAgB,KAAK,cAAc,IAAI,UAAqB,YAAY,WAAW,IAAI,CAAC;AAAA,IACpG;AACA,QAAI,KAAK,uBAAuB,MAAM;AAClC,cAAQ,sBAAsB,KAAK,oBAAoB,IAAI,UAAqB,iBAAiB,WAAW,IAAI,CAAC;AAAA,IACrH;AACA,QAAI,KAAK,qBAAqB,MAAM;AAChC,cAAQ,oBAAoB,KAAK,kBAAkB,IAAI,UAAqB,gBAAgB,WAAW,IAAI,CAAC;AAAA,IAChH;AACA,QAAI,KAAK,oBAAoB,MAAM;AAC/B,cAAQ,mBAAgC,eAAe,WAAW,KAAK,gBAAgB;AAAA,IAC3F;AACA,QAAI,KAAK,wBAAwB,MAAM;AACnC,cAAQ,uBAAuB,KAAK;AAAA,IACxC;AACA,QAAI,KAAK,mBAAmB,MAAM;AAC9B,cAAQ,kBAAkB,KAAK;AAAA,IACnC;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAQF,CAAC;AACL,QAAI,KAAK,YAAY,MAAM;AACvB,WAAK,WAAW,KAAK;AAAA,IACzB;AACA,QAAI,KAAK,iBAAiB,MAAM;AAC5B,WAAK,gBAAgB,KAAK,cAAc,IAAI,CAAC,SAAmC,KAAK,SAAS,CAAC;AAAA,IACnG;AACA,QAAI,KAAK,uBAAuB,MAAM;AAClC,WAAK,sBAAsB,KAAK,oBAAoB,IAAI,CAAC,SAAwC,KAAK,SAAS,CAAC;AAAA,IACpH;AACA,QAAI,KAAK,qBAAqB,MAAM;AAChC,WAAK,oBAAoB,KAAK,kBAAkB,IAAI,CAAC,SAAuC,KAAK,SAAS,CAAC;AAAA,IAC/G;AACA,QAAI,KAAK,oBAAoB,MAAM;AAC/B,WAAK,mBAAmB,KAAK,iBAAiB,SAAS;AAAA,IAC3D;AACA,QAAI,KAAK,wBAAwB,MAAM;AACnC,WAAK,uBAAuB,KAAK;AAAA,IACrC;AACA,QAAI,KAAK,mBAAmB,MAAM;AAC9B,WAAK,kBAAkB,KAAK;AAAA,IAChC;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,mBAAa;AAC1C,QAAI,KAAK,YAAY;AACjB,aAAO,YAAY,GAAG,KAAK,QAAQ;AACvC,QAAI,KAAK,cAAc;AACnB,aAAO,qBAAqB,GAAG,KAAK,eAAe,CAAC,SAAmC,KAAK,UAAU,MAAM,CAAC;AACjH,QAAI,KAAK,oBAAoB;AACzB,aAAO,qBAAqB,GAAG,KAAK,qBAAqB,CAAC,SAAwC,KAAK,UAAU,MAAM,CAAC;AAC5H,QAAI,KAAK,kBAAkB;AACvB,aAAO,qBAAqB,GAAG,KAAK,mBAAmB,CAAC,SAAuC,KAAK,UAAU,MAAM,CAAC;AACzH,QAAI,KAAK;AACL,aAAO,aAAa,GAAG,KAAK,kBAAkB,MAAM,KAAK,iBAAiB,UAAU,MAAM,CAAC;AAC/F,QAAI,KAAK,wBAAwB;AAC7B,aAAO,UAAU,GAAG,KAAK,oBAAoB;AACjD,QAAI,KAAK,mBAAmB;AACxB,aAAO,YAAY,GAAG,KAAK,eAAe;AAC9C,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAA4D;AAC3E,UAAM,SAAS,iBAAsB,qBAAe,QAAQ,IAAS,mBAAa,KAAK,GAAG,UAAU,IAAI,qBAAoB;AAC5H,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,kBAAQ,WAAW,OAAO,WAAW;AACrC;AAAA,QACJ,KAAK;AACD,iBAAO,YAAY,QAAQ,eAAe,MAAW,cAAQ,0BAA0B,SAAS,GAAgB,YAAY,YAAY,MAAM,GAAgB,WAAW,CAAC;AAC1K;AAAA,QACJ,KAAK;AACD,iBAAO,YAAY,QAAQ,qBAAqB,MAAW,cAAQ,0BAA0B,SAAS,GAAgB,iBAAiB,YAAY,MAAM,GAAgB,gBAAgB,CAAC;AAC1L;AAAA,QACJ,KAAK;AACD,iBAAO,YAAY,QAAQ,mBAAmB,MAAW,cAAQ,0BAA0B,SAAS,GAAgB,gBAAgB,YAAY,MAAM,GAAgB,eAAe,CAAC;AACtL;AAAA,QACJ,KAAK;AACD,iBAAO,YAAY,QAAQ,kBAAkB,MAAM,QAAQ,mBAAgC,eAAe,YAAY,MAAM,CAAC;AAC7H;AAAA,QACJ,KAAK;AACD,kBAAQ,uBAAuB,OAAO,SAAS;AAC/C;AAAA,QACJ,KAAK;AACD,kBAAQ,kBAAkB,OAAO,WAAW;AAC5C;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAAwC;AAC7D,WAAO,qBAAoB,YAAY,KAAK;AAAA,EAChD;AACJ;AA9MIA,kBAAA;AADG,IAAM,sBAAN;AArHP,IAAAA;AAqUO,IAAM,wBAAN,MAAM,8BAAkC,cAAQ;AAAA,EAEnD,YAAY,MAIT;AACC,UAAM;AANV,uBAAAA,iBAA4B,CAAC;AAOzB,IAAK,cAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,mBAAKA,gBAAa;AAC5F,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,SAAS,QAAQ,KAAK,OAAO,QAAW;AACxC,aAAK,MAAM,KAAK;AAAA,MACpB;AACA,UAAI,gBAAgB,QAAQ,KAAK,cAAc,QAAW;AACtD,aAAK,aAAa,KAAK;AAAA,MAC3B;AACA,UAAI,SAAS,QAAQ,KAAK,OAAO,QAAW;AACxC,aAAK,MAAM,KAAK;AAAA,MACpB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,MAAM;AACN,WAAY,cAAQ,gBAAgB,MAAM,QAAQ,CAAC;AAAA,EACvD;AAAA,EACA,IAAI,IAAI,OAAe;AACnB,IAAK,cAAQ,gBAAgB,MAAM,GAAG,KAAK;AAAA,EAC/C;AAAA,EACA,IAAI,UAAU;AACV,WAAY,cAAQ,SAAS,MAAM,CAAC,KAAK;AAAA,EAC7C;AAAA,EACA,IAAI,aAAa;AACb,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,WAAW,OAAe;AAC1B,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,MAAM;AACN,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,IAAI,OAAe;AACnB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,OAAO,WAAW,MAIO;AACrB,UAAM,UAAU,IAAI,sBAAqB,CAAC,CAAC;AAC3C,QAAI,KAAK,OAAO,MAAM;AAClB,cAAQ,MAAM,OAAO,WAAW,KAAK,GAAG;AAAA,IAC5C;AACA,QAAI,KAAK,cAAc,MAAM;AACzB,cAAQ,aAAa,KAAK;AAAA,IAC9B;AACA,QAAI,KAAK,OAAO,MAAM;AAClB,cAAQ,MAAM,KAAK;AAAA,IACvB;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAIF,CAAC;AACL,QAAI,KAAK,OAAO,MAAM;AAClB,WAAK,MAAM,KAAK,IAAI,SAAS;AAAA,IACjC;AACA,QAAI,KAAK,cAAc,MAAM;AACzB,WAAK,aAAa,KAAK;AAAA,IAC3B;AACA,QAAI,KAAK,OAAO,MAAM;AAClB,WAAK,MAAM,KAAK;AAAA,IACpB;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,mBAAa;AAC1C,QAAI,KAAK;AACL,aAAO,aAAa,GAAG,KAAK,KAAK,MAAM,KAAK,IAAI,UAAU,MAAM,CAAC;AACrE,QAAI,KAAK,WAAW;AAChB,aAAO,YAAY,GAAG,KAAK,UAAU;AACzC,QAAI,KAAK,IAAI;AACT,aAAO,YAAY,GAAG,KAAK,GAAG;AAClC,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAA6D;AAC5E,UAAM,SAAS,iBAAsB,qBAAe,QAAQ,IAAS,mBAAa,KAAK,GAAG,UAAU,IAAI,sBAAqB;AAC7H,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,iBAAO,YAAY,QAAQ,KAAK,MAAM,QAAQ,MAAM,OAAO,YAAY,MAAM,CAAC;AAC9E;AAAA,QACJ,KAAK;AACD,kBAAQ,aAAa,OAAO,WAAW;AACvC;AAAA,QACJ,KAAK;AACD,kBAAQ,MAAM,OAAO,WAAW;AAChC;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAAyC;AAC9D,WAAO,sBAAqB,YAAY,KAAK;AAAA,EACjD;AACJ;AAlHIA,kBAAA;AADG,IAAM,uBAAN;AArUP,IAAAA;AAybO,IAAM,gCAAN,MAAM,sCAA0C,cAAQ;AAAA,EAE3D,YAAY,MAIT;AACC,UAAM;AANV,uBAAAA,iBAA4B,CAAC;AAOzB,IAAK,cAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,mBAAKA,gBAAa;AAC5F,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,gBAAgB,QAAQ,KAAK,cAAc,QAAW;AACtD,aAAK,aAAa,KAAK;AAAA,MAC3B;AACA,UAAI,qBAAqB,QAAQ,KAAK,mBAAmB,QAAW;AAChE,aAAK,kBAAkB,KAAK;AAAA,MAChC;AACA,UAAI,WAAW,QAAQ,KAAK,SAAS,QAAW;AAC5C,aAAK,QAAQ,KAAK;AAAA,MACtB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,aAAa;AACb,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,WAAW,OAAe;AAC1B,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,kBAAkB;AAClB,WAAY,cAAQ,oBAAoB,MAAM,GAAG,CAAC;AAAA,EACtD;AAAA,EACA,IAAI,gBAAgB,OAAe;AAC/B,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,QAAQ;AACR,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,MAAM,OAAe;AACrB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,OAAO,WAAW,MAIe;AAC7B,UAAM,UAAU,IAAI,8BAA6B,CAAC,CAAC;AACnD,QAAI,KAAK,cAAc,MAAM;AACzB,cAAQ,aAAa,KAAK;AAAA,IAC9B;AACA,QAAI,KAAK,mBAAmB,MAAM;AAC9B,cAAQ,kBAAkB,KAAK;AAAA,IACnC;AACA,QAAI,KAAK,SAAS,MAAM;AACpB,cAAQ,QAAQ,KAAK;AAAA,IACzB;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAIF,CAAC;AACL,QAAI,KAAK,cAAc,MAAM;AACzB,WAAK,aAAa,KAAK;AAAA,IAC3B;AACA,QAAI,KAAK,mBAAmB,MAAM;AAC9B,WAAK,kBAAkB,KAAK;AAAA,IAChC;AACA,QAAI,KAAK,SAAS,MAAM;AACpB,WAAK,QAAQ,KAAK;AAAA,IACtB;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,mBAAa;AAC1C,QAAI,KAAK,WAAW;AAChB,aAAO,YAAY,GAAG,KAAK,UAAU;AACzC,QAAI,KAAK,mBAAmB;AACxB,aAAO,YAAY,GAAG,KAAK,eAAe;AAC9C,QAAI,KAAK,MAAM;AACX,aAAO,YAAY,GAAG,KAAK,KAAK;AACpC,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAAqE;AACpF,UAAM,SAAS,iBAAsB,qBAAe,QAAQ,IAAS,mBAAa,KAAK,GAAG,UAAU,IAAI,8BAA6B;AACrI,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,kBAAQ,aAAa,OAAO,WAAW;AACvC;AAAA,QACJ,KAAK;AACD,kBAAQ,kBAAkB,OAAO,WAAW;AAC5C;AAAA,QACJ,KAAK;AACD,kBAAQ,QAAQ,OAAO,WAAW;AAClC;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAAiD;AACtE,WAAO,8BAA6B,YAAY,KAAK;AAAA,EACzD;AACJ;AA/GIA,kBAAA;AADG,IAAM,+BAAN;AAzbP,IAAAA;AA0iBO,IAAM,iCAAN,MAAM,uCAA2C,cAAQ;AAAA,EAE5D,YAAY,MAGT;AACC,UAAM;AALV,uBAAAA,iBAA4B,CAAC;AAMzB,IAAK,cAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,mBAAKA,gBAAa;AAC5F,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,SAAS,QAAQ,KAAK,OAAO,QAAW;AACxC,aAAK,MAAM,KAAK;AAAA,MACpB;AACA,UAAI,aAAa,QAAQ,KAAK,WAAW,QAAW;AAChD,aAAK,UAAU,KAAK;AAAA,MACxB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,MAAM;AACN,WAAY,cAAQ,gBAAgB,MAAM,QAAQ,CAAC;AAAA,EACvD;AAAA,EACA,IAAI,IAAI,OAAe;AACnB,IAAK,cAAQ,gBAAgB,MAAM,GAAG,KAAK;AAAA,EAC/C;AAAA,EACA,IAAI,UAAU;AACV,WAAY,cAAQ,SAAS,MAAM,CAAC,KAAK;AAAA,EAC7C;AAAA,EACA,IAAI,UAAU;AACV,WAAY,cAAQ,oBAAoB,MAAM,GAAG,KAAK;AAAA,EAC1D;AAAA,EACA,IAAI,QAAQ,OAAgB;AACxB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,OAAO,WAAW,MAGgB;AAC9B,UAAM,UAAU,IAAI,+BAA8B,CAAC,CAAC;AACpD,QAAI,KAAK,OAAO,MAAM;AAClB,cAAQ,MAAM,OAAO,WAAW,KAAK,GAAG;AAAA,IAC5C;AACA,QAAI,KAAK,WAAW,MAAM;AACtB,cAAQ,UAAU,KAAK;AAAA,IAC3B;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAGF,CAAC;AACL,QAAI,KAAK,OAAO,MAAM;AAClB,WAAK,MAAM,KAAK,IAAI,SAAS;AAAA,IACjC;AACA,QAAI,KAAK,WAAW,MAAM;AACtB,WAAK,UAAU,KAAK;AAAA,IACxB;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,mBAAa;AAC1C,QAAI,KAAK;AACL,aAAO,aAAa,GAAG,KAAK,KAAK,MAAM,KAAK,IAAI,UAAU,MAAM,CAAC;AACrE,QAAI,KAAK,WAAW;AAChB,aAAO,UAAU,GAAG,KAAK,OAAO;AACpC,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAAsE;AACrF,UAAM,SAAS,iBAAsB,qBAAe,QAAQ,IAAS,mBAAa,KAAK,GAAG,UAAU,IAAI,+BAA8B;AACtI,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,iBAAO,YAAY,QAAQ,KAAK,MAAM,QAAQ,MAAM,OAAO,YAAY,MAAM,CAAC;AAC9E;AAAA,QACJ,KAAK;AACD,kBAAQ,UAAU,OAAO,SAAS;AAClC;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAAkD;AACvE,WAAO,+BAA8B,YAAY,KAAK;AAAA,EAC1D;AACJ;AA3FIA,kBAAA;AADG,IAAM,gCAAN;AA1iBP,IAAAA;AAuoBO,IAAM,yBAAN,MAAM,+BAAmC,cAAQ;AAAA,EAEpD,YAAY,MAGT;AACC,UAAM;AALV,uBAAAA,iBAA4B,CAAC;AAMzB,IAAK,cAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,mBAAKA,gBAAa;AAC5F,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,gBAAgB,QAAQ,KAAK,cAAc,QAAW;AACtD,aAAK,aAAa,KAAK;AAAA,MAC3B;AACA,UAAI,qBAAqB,QAAQ,KAAK,mBAAmB,QAAW;AAChE,aAAK,kBAAkB,KAAK;AAAA,MAChC;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,aAAa;AACb,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,WAAW,OAAe;AAC1B,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,kBAAkB;AAClB,WAAY,cAAQ,oBAAoB,MAAM,GAAG,CAAC;AAAA,EACtD;AAAA,EACA,IAAI,gBAAgB,OAAe;AAC/B,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,OAAO,WAAW,MAGQ;AACtB,UAAM,UAAU,IAAI,uBAAsB,CAAC,CAAC;AAC5C,QAAI,KAAK,cAAc,MAAM;AACzB,cAAQ,aAAa,KAAK;AAAA,IAC9B;AACA,QAAI,KAAK,mBAAmB,MAAM;AAC9B,cAAQ,kBAAkB,KAAK;AAAA,IACnC;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAGF,CAAC;AACL,QAAI,KAAK,cAAc,MAAM;AACzB,WAAK,aAAa,KAAK;AAAA,IAC3B;AACA,QAAI,KAAK,mBAAmB,MAAM;AAC9B,WAAK,kBAAkB,KAAK;AAAA,IAChC;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,mBAAa;AAC1C,QAAI,KAAK,WAAW;AAChB,aAAO,YAAY,GAAG,KAAK,UAAU;AACzC,QAAI,KAAK,mBAAmB;AACxB,aAAO,YAAY,GAAG,KAAK,eAAe;AAC9C,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAA8D;AAC7E,UAAM,SAAS,iBAAsB,qBAAe,QAAQ,IAAS,mBAAa,KAAK,GAAG,UAAU,IAAI,uBAAsB;AAC9H,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,kBAAQ,aAAa,OAAO,WAAW;AACvC;AAAA,QACJ,KAAK;AACD,kBAAQ,kBAAkB,OAAO,WAAW;AAC5C;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAA0C;AAC/D,WAAO,uBAAsB,YAAY,KAAK;AAAA,EAClD;AACJ;AAxFIA,kBAAA;AADG,IAAM,wBAAN;AAvoBP,IAAAA;AAiuBO,IAAM,0BAAN,MAAM,gCAAoC,cAAQ;AAAA,EAErD,YAAY,MAIT;AACC,UAAM;AANV,uBAAAA,iBAA4B,CAAC;AAOzB,IAAK,cAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,mBAAKA,gBAAa;AAC5F,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU;AACjD,UAAI,SAAS,QAAQ,KAAK,OAAO,QAAW;AACxC,aAAK,MAAM,KAAK;AAAA,MACpB;AACA,UAAI,YAAY,QAAQ,KAAK,UAAU,QAAW;AAC9C,aAAK,SAAS,KAAK;AAAA,MACvB;AACA,UAAI,aAAa,QAAQ,KAAK,WAAW,QAAW;AAChD,aAAK,UAAU,KAAK;AAAA,MACxB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,MAAM;AACN,WAAY,cAAQ,gBAAgB,MAAM,QAAQ,CAAC;AAAA,EACvD;AAAA,EACA,IAAI,IAAI,OAAe;AACnB,IAAK,cAAQ,gBAAgB,MAAM,GAAG,KAAK;AAAA,EAC/C;AAAA,EACA,IAAI,UAAU;AACV,WAAY,cAAQ,SAAS,MAAM,CAAC,KAAK;AAAA,EAC7C;AAAA,EACA,IAAI,SAAS;AACT,WAAY,cAAQ,oBAAoB,MAAM,GAAG,kBAAsB;AAAA,EAC3E;AAAA,EACA,IAAI,OAAO,OAAoB;AAC3B,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,UAAU;AACV,WAAY,cAAQ,oBAAoB,MAAM,GAAG,EAAE;AAAA,EACvD;AAAA,EACA,IAAI,QAAQ,OAAe;AACvB,IAAK,cAAQ,SAAS,MAAM,GAAG,KAAK;AAAA,EACxC;AAAA,EACA,OAAO,WAAW,MAIS;AACvB,UAAM,UAAU,IAAI,wBAAuB,CAAC,CAAC;AAC7C,QAAI,KAAK,OAAO,MAAM;AAClB,cAAQ,MAAM,OAAO,WAAW,KAAK,GAAG;AAAA,IAC5C;AACA,QAAI,KAAK,UAAU,MAAM;AACrB,cAAQ,SAAS,KAAK;AAAA,IAC1B;AACA,QAAI,KAAK,WAAW,MAAM;AACtB,cAAQ,UAAU,KAAK;AAAA,IAC3B;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,UAAM,OAIF,CAAC;AACL,QAAI,KAAK,OAAO,MAAM;AAClB,WAAK,MAAM,KAAK,IAAI,SAAS;AAAA,IACjC;AACA,QAAI,KAAK,UAAU,MAAM;AACrB,WAAK,SAAS,KAAK;AAAA,IACvB;AACA,QAAI,KAAK,WAAW,MAAM;AACtB,WAAK,UAAU,KAAK;AAAA,IACxB;AACA,WAAO;AAAA,EACX;AAAA,EAGA,UAAU,GAA0C;AAChD,UAAM,SAAS,KAAK,IAAS,mBAAa;AAC1C,QAAI,KAAK;AACL,aAAO,aAAa,GAAG,KAAK,KAAK,MAAM,KAAK,IAAI,UAAU,MAAM,CAAC;AACrE,QAAI,KAAK,UAAU;AACf,aAAO,UAAU,GAAG,KAAK,MAAM;AACnC,QAAI,KAAK,QAAQ;AACb,aAAO,YAAY,GAAG,KAAK,OAAO;AACtC,QAAI,CAAC;AACD,aAAO,OAAO,gBAAgB;AAAA,EACtC;AAAA,EACA,OAAO,YAAY,OAA+D;AAC9E,UAAM,SAAS,iBAAsB,qBAAe,QAAQ,IAAS,mBAAa,KAAK,GAAG,UAAU,IAAI,wBAAuB;AAC/H,WAAO,OAAO,UAAU,GAAG;AACvB,UAAI,OAAO,WAAW;AAClB;AACJ,cAAQ,OAAO,eAAe,GAAG;AAAA,QAC7B,KAAK;AACD,iBAAO,YAAY,QAAQ,KAAK,MAAM,QAAQ,MAAM,OAAO,YAAY,MAAM,CAAC;AAC9E;AAAA,QACJ,KAAK;AACD,kBAAQ,SAAS,OAAO,SAAS;AACjC;AAAA,QACJ,KAAK;AACD,kBAAQ,UAAU,OAAO,WAAW;AACpC;AAAA,QACJ;AAAS,iBAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAA8B;AAC1B,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,OAAO,kBAAkB,OAA2C;AAChE,WAAO,wBAAuB,YAAY,KAAK;AAAA,EACnD;AACJ;AAlHIA,kBAAA;AADG,IAAM,yBAAN;AA4IA,IAAe,8BAAf,MAA2C;AAkClD;AAlCsB,4BACX,aAAa;AAAA,EAChB,cAAc;AAAA,IACV,MAAM;AAAA,IACN,eAAe;AAAA,IACf,gBAAgB;AAAA,IAChB,kBAAkB,CAAC,YAAiC,OAAO,KAAK,QAAQ,UAAU,CAAC;AAAA,IACnF,oBAAoB,CAAC,UAAkB,oBAAoB,YAAY,IAAI,WAAW,KAAK,CAAC;AAAA,IAC5F,mBAAmB,CAAC,YAAkC,OAAO,KAAK,QAAQ,UAAU,CAAC;AAAA,IACrF,qBAAqB,CAAC,UAAkB,qBAAqB,YAAY,IAAI,WAAW,KAAK,CAAC;AAAA,EAClG;AAAA,EACA,uBAAuB;AAAA,IACnB,MAAM;AAAA,IACN,eAAe;AAAA,IACf,gBAAgB;AAAA,IAChB,kBAAkB,CAAC,YAA0C,OAAO,KAAK,QAAQ,UAAU,CAAC;AAAA,IAC5F,oBAAoB,CAAC,UAAkB,6BAA6B,YAAY,IAAI,WAAW,KAAK,CAAC;AAAA,IACrG,mBAAmB,CAAC,YAA2C,OAAO,KAAK,QAAQ,UAAU,CAAC;AAAA,IAC9F,qBAAqB,CAAC,UAAkB,8BAA8B,YAAY,IAAI,WAAW,KAAK,CAAC;AAAA,EAC3G;AAAA,EACA,gBAAgB;AAAA,IACZ,MAAM;AAAA,IACN,eAAe;AAAA,IACf,gBAAgB;AAAA,IAChB,kBAAkB,CAAC,YAAmC,OAAO,KAAK,QAAQ,UAAU,CAAC;AAAA,IACrF,oBAAoB,CAAC,UAAkB,sBAAsB,YAAY,IAAI,WAAW,KAAK,CAAC;AAAA,IAC9F,mBAAmB,CAAC,YAAoC,OAAO,KAAK,QAAQ,UAAU,CAAC;AAAA,IACvF,qBAAqB,CAAC,UAAkB,uBAAuB,YAAY,IAAI,WAAW,KAAK,CAAC;AAAA,EACpG;AACJ;AAMG,IAAM,gBAAN,cAAmC,qCAA6B,4BAA4B,YAAY,WAAW,CAAC,CAAC,EAAE;AAAA,EAC1H,YAAY,SAAiBC,cAAwC,SAA0C;AAC3G,UAAM,SAASA,cAAa,OAAO;AAEvC,wBAAuF,CAAC,SAA8B,UAAiD,YAAgE;AAAE,UAAI,CAAC,UAAU;AACpP,mBAAW,IAAW;AAAA,MAC1B;AAAE,UAAI,CAAC,SAAS;AACZ,kBAAU,CAAC;AAAA,MACf;AAAE,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW,MAAM,aAAa,SAAS,UAAU,SAAS,CAAC,OAA4B,aAAmC;AACrJ,YAAI,OAAO;AACP,iBAAO,KAAK;AAAA,QAChB,OACK;AACD,kBAAQ,QAAQ;AAAA,QACpB;AAAA,MACJ,CAAC,CAAC;AAAA,IAAG;AACL,iCAAkH,CAAC,SAAuC,UAAiD,YAAyE;AAAE,UAAI,CAAC,UAAU;AACjS,mBAAW,IAAW;AAAA,MAC1B;AAAE,UAAI,CAAC,SAAS;AACZ,kBAAU,CAAC;AAAA,MACf;AAAE,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW,MAAM,sBAAsB,SAAS,UAAU,SAAS,CAAC,OAA4B,aAA4C;AACvK,YAAI,OAAO;AACP,iBAAO,KAAK;AAAA,QAChB,OACK;AACD,kBAAQ,QAAQ;AAAA,QACpB;AAAA,MACJ,CAAC,CAAC;AAAA,IAAG;AACL,0BAA6F,CAAC,SAAgC,UAAiD,YAAkE;AAAE,UAAI,CAAC,UAAU;AAC9P,mBAAW,IAAW;AAAA,MAC1B;AAAE,UAAI,CAAC,SAAS;AACZ,kBAAU,CAAC;AAAA,MACf;AAAE,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW,MAAM,eAAe,SAAS,UAAU,SAAS,CAAC,OAA4B,aAAqC;AACzJ,YAAI,OAAO;AACP,iBAAO,KAAK;AAAA,QAChB,OACK;AACD,kBAAQ,QAAQ;AAAA,QACpB;AAAA,MACJ,CAAC,CAAC;AAAA,IAAG;AAAA,EApCL;AAqCJ;;;AFn5BO,IAAM,SAAN,MAAa;AAAA,EAGT,YAAY,KAAa;AAC5B,UAAM,OAAO,2BAAY,UAAU;AACnC,SAAK,SAAS,IAAI,cAAc,KAAK,IAAI;AAAA,EAC7C;AAAA,EAEa,OACT,SACA,OACA,YACA,YACuB;AAAA;AACvB,YAAM,OAAO,MAAM,KAAK,cAAc,SAAS,MAAM,cAAc,YAAY,UAAU;AACzF,UAAI,KAAK,SAAS;AACd,cAAM,IAAI,MAAM,oBAAoB,KAAK,IAAI,GAAG,EAAE;AAAA,MACtD;AACA,cAAQ,IAAI,qBAAqB,KAAK,UAAU;AAChD,YAAM,OAAO,MAAM,KAAK,aAAa,KAAK,YAAY,YAAY,MAAM,KAAK;AAC7E,UAAI,KAAK,SAAS;AACd,cAAM,IAAI,MAAM,oBAAoB,KAAK,IAAI,GAAG,EAAE;AAAA,MACtD;AAEA,aAAO;AAAA,QACH,UAAU,KAAK;AAAA,QACf,KAAK,KAAK;AAAA,MACd;AAAA,IACJ;AAAA;AAAA,EAEa,aACT,SACA,aACA,YACA,YAC6B;AAAA;AAC7B,aAAO,KAAK,cAAc,SAAS,aAAa,YAAY,UAAU;AAAA,IAC1E;AAAA;AAAA,EAEa,YAAY,IAAY,YAAoB,OAAe;AAAA;AACpE,YAAM,KAAK,aAAa,IAAI,YAAY,KAAK;AAAA,IACjD;AAAA;AAAA;AAAA,EAGa,KAAK,IAAY,YAA0C;AAAA;AACpE,YAAM,WAAW;AACjB,YAAM,QAAQ;AAEd,eAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC5B,cAAM,MAAM,MAAM,KAAK,eAAe,IAAI,UAAU;AACpD,gBAAQ,IAAI,QAAQ;AAAA,UAChB;AACI,oBAAQ,IAAI,WAAW,EAAE,gBAAgB,IAAI,OAAO,EAAE;AACtD,mBAAO,EAAE,UAAU,IAAI,IAAI,IAAI,SAAS,SAAS,KAAK;AAAA,UAC1D;AACI,oBAAQ,IAAI,WAAW,EAAE,SAAS;AAClC,mBAAO,EAAE,UAAU,IAAI,SAAS,MAAM;AAAA,UAC1C;AACI,oBAAQ;AAAA,cACJ,SAAS,EAAE;AAAA,YACf;AACA;AAAA,UACJ;AACI,oBAAQ,IAAI,SAAS,EAAE,uBAAuB;AAAA,QACtD;AACA,cAAM,IAAI,QAAQ,aAAW,WAAW,SAAS,QAAQ,CAAC;AAAA,MAC9D;AACA,cAAQ,IAAI,SAAS,EAAE,oBAAoB,WAAW,KAAK,UAAU;AACrE,aAAO,EAAE,UAAU,IAAI,SAAS,MAAM;AAAA,IAC1C;AAAA;AAAA,EAEc,cACV,SACA,aACA,YACA,YAC6B;AAAA;AAC7B,YAAM,MAAM,IAAI,oBAAoB;AAAA,QAChC,UAAU;AAAA,QACV,iBAAiB;AAAA,QACjB,eAAe,QAAQ,YAAY,EAAE,IAAI,OAAK,KAAK,iBAAiB,EAAE,IAAI,CAAC;AAAA,QAC3E,qBAAqB,QAAQ,YAAY,EAAE,IAAI,OAAK,KAAK,iBAAiB,EAAE,IAAI,CAAC;AAAA,QACjF,mBAAmB,QAAQ,gBAAgB,EAAE,IAAI,OAAK,KAAK,qBAAqB,EAAE,IAAI,CAAC;AAAA,QACvF,sBAAsB;AAAA,QACtB,kBAAkB;AAAA,MACtB,CAAC;AACD,YAAM,MAAM,MAAM,KAAK,OAAO,aAAa,GAAG;AAC9C,aAAO;AAAA,IACX;AAAA;AAAA,EAEc,aAAa,IAAY,YAAoB,OAAuD;AAAA;AAC9G,YAAM,MAAM,IAAI,6BAA6B;AAAA,QACzC,YAAY;AAAA,QACZ,iBAAiB;AAAA,QACjB;AAAA,MACJ,CAAC;AACD,YAAM,MAAM,MAAM,KAAK,OAAO,sBAAsB,GAAG;AACvD,UAAI,IAAI,SAAS;AACb,cAAM,IAAI,MAAM,2CAA2C,IAAI,IAAI,GAAG,EAAE;AAAA,MAC5E;AACA,aAAO;AAAA,IACX;AAAA;AAAA,EAEc,eAAe,IAAY,YAAqD;AAAA;AAC1F,YAAM,MAAM,IAAI,sBAAsB,EAAE,YAAY,IAAI,iBAAiB,WAAW,CAAC;AACrF,YAAM,MAAM,MAAM,KAAK,OAAO,eAAe,GAAG;AAChD,UAAI,IAAI,SAAS;AACb,cAAM,IAAI,MAAM,yCAAyC,IAAI,IAAI,GAAG,EAAE;AAAA,MAC1E;AACA,aAAO;AAAA,IACX;AAAA;AAAA,EAEQ,iBAAiB,MAAgC;AACrD,WAAO,IAAI,YAAY;AAAA,MACnB,SAAS,KAAK;AAAA,MACd,kBAAkB,KAAK;AAAA,MACvB,mBAAmB,KAAK,OAAO,IAAI,OAAK;AACpC,eAAO,IAAI,eAAe;AAAA,UACtB,kBAAkB,EAAE;AAAA,UACpB,WAAW,EAAE;AAAA,UACb,YAAY,EAAE;AAAA,UACd,kBAAkB,EAAE;AAAA,UACpB,aAAa,EAAE;AAAA,UACf,OAAO,EAAE;AAAA,QACb,CAAC;AAAA,MACL,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA,EAEQ,iBAAiB,MAAqC;AAC1D,WAAO,IAAI,iBAAiB;AAAA,MACxB,SAAS,KAAK;AAAA,MACd,cAAc,CAAC,KAAK,IAAI;AAAA,MACxB,SAAS,KAAK;AAAA,IAClB,CAAC;AAAA,EACL;AAAA,EAEQ,qBAAqB,MAAwC;AACjE,WAAO,IAAI,gBAAgB,EAAE,kBAAkB,KAAK,KAAK,CAAC;AAAA,EAC9D;AACJ;;;AGjLA,oBAAuB;AAWhB,SAAS,UAAU,OAA6B;AACnD,QAAM,MAAM,qBAAO,UAAU,KAAK;AAClC,SAAO,EAAE,MAAM,WAAW,MAAM,IAAI,SAAS,EAAE,EAAE;AACrD;AAEO,SAAS,UAAU,OAA6B;AACnD,QAAM,MAAM,qBAAO,UAAU,KAAK;AAClC,SAAO,EAAE,MAAM,WAAW,MAAM,IAAI,SAAS,EAAE,EAAE;AACrD;AAEO,SAAS,SAAS,OAA6B;AAClD,QAAM,MAAM,qBAAO,UAAU,KAAK;AAClC,SAAO,EAAE,MAAM,UAAU,MAAM,IAAI,SAAS,EAAE,EAAE;AACpD;AAEO,SAAS,UAAU,OAA6B;AACnD,MAAI,CAAC,qBAAO,YAAY,KAAK,GAAG;AAC5B,UAAM,IAAI,MAAM,SAAS,KAAK,iBAAiB;AAAA,EACnD;AACA,QAAM,KAAK,qBAAO,SAAS,KAAK;AAChC,MAAI,GAAG,WAAW,IAAI;AAClB,UAAM,IAAI,MAAM,kDAAkD,GAAG,MAAM,EAAE;AAAA,EACjF;AACA,SAAO,EAAE,MAAM,WAAW,MAAM,MAAM;AAC1C;;;ACnCA,IAAAC,kBAA4B;AAUrB,IAAM,SAAN,MAAa;AAAA,EAGT,YAAY,KAAa;AAC5B,UAAM,OAAO,4BAAY,eAAe;AACxC,SAAK,SAAS,IAAI,aAAa,KAAK,IAAI;AAAA,EAC5C;AAAA,EAEa,MAAM,SAA+C;AAAA;AAC9D,YAAM,MAAM,MAAM,KAAK,OAAO,MAAM,QAAQ,MAAM,CAAC;AACnD,aAAO;AAAA,IACX;AAAA;AAAA,EAEa,WAAW,SAAoD;AAAA;AACxE,YAAM,MAAM,MAAM,KAAK,OAAO,WAAW,QAAQ,MAAM,CAAC;AACxD,aAAO;AAAA,IACX;AAAA;AAAA,EAEa,SAAS,IAAuC;AAAA;AACzD,YAAM,MAAM,MAAM,KAAK,OAAO,SAAS,IAAI,gBAAgB,EAAE,UAAU,GAAG,CAAC,CAAC;AAC5E,aAAO;AAAA,IACX;AAAA;AACJ;;;AChCA,IAAAC,iBAAuB;AAchB,IAAM,eAAN,MAAmB;AAAA,EAAnB;AACH,SAAiB,WAA6B,CAAC;AAC/C,SAAiB,WAA6B,CAAC;AAC/C,SAAiB,eAAqC,CAAC;AAAA;AAAA,EAGhD,cAAgC;AACnC,WAAO,KAAK;AAAA,EAChB;AAAA,EAEO,cAAgC;AACnC,WAAO,KAAK;AAAA,EAChB;AAAA,EAEO,kBAAwC;AAC3C,WAAO,KAAK;AAAA,EAChB;AAAA,EAEO,WAAW,MAAmB,OAAsB;AACvD,oBAAgB,IAAI;AACpB,SAAK,SAAS,KAAK,IAAI,eAAe,EAAE,OAAO,KAAK,CAAC,CAAC;AAAA,EAC1D;AAAA,EAEO,WAAW,MAAmB,OAAsB;AACvD,oBAAgB,IAAI;AACpB,SAAK,SAAS,KAAK,IAAI,eAAe,EAAE,OAAO,KAAK,CAAC,CAAC;AAAA,EAC1D;AAAA,EAEO,eAAe,MAAuB,OAAsB;AAC/D,wBAAoB,IAAI;AACxB,SAAK,aAAa,KAAK,IAAI,mBAAmB,EAAE,OAAO,KAAK,CAAC,CAAC;AAAA,EAClE;AAAA,EAEO,eAAe,MAAyB;AAC3C,SAAK,cAAc,IAAI,YAAc;AAAA,MACjC,YAAY,KAAK,UAAU,IAAI;AAAA,IACnC,CAAC;AAAA,EACL;AAAA,EAEO,QAAsB;AACzB,QAAI,KAAK,gBAAgB,QAAW;AAChC,WAAK,cAAc,IAAI,YAAc,EAAE,YAAY,KAAK,CAAC;AAAA,IAC7D;AACA,UAAM,MAAM,IAAI,aAAa;AAAA,MACzB,UAAU,KAAK;AAAA,MACf,UAAU,KAAK;AAAA,MACf,cAAc,KAAK;AAAA,MACnB,cAAc,KAAK;AAAA,IACvB,CAAC;AACD,WAAO;AAAA,EACX;AACJ;AAEA,SAAS,gBAAgB,GAAgB;AACrC,MAAI,EAAE,YAAY;AAAG,QAAI,qBAAqB,EAAE,SAAS;AACzD,MAAI,CAAC,SAAS,EAAE,OAAO;AAAG,QAAI,uBAAuB,EAAE,OAAO;AAC9D,IAAE,OAAO,QAAQ,CAAC,OAAO,MAAM;AAC3B,yBAAqB,OAAO,CAAC;AAAA,EACjC,CAAC;AACL;AAEA,SAAS,qBAAqB,GAAU,GAAW;AAC/C,QAAM,QAAQ,iBAAiB,CAAC;AAChC,MAAI,CAAC,sBAAO,UAAU,EAAE,QAAQ;AAAG,QAAI,QAAQ,aAAa,EAAE,QAAQ;AACtE,MAAI,EAAE,YAAY;AAAG,QAAI,QAAQ,cAAc,EAAE,SAAS;AAC1D,MAAI,CAAC,SAAS,EAAE,QAAQ;AAAG,QAAI,QAAQ,aAAa,EAAE,QAAQ;AAC9D,MAAI,EAAE,cAAc;AAAG,QAAI,QAAQ,gBAAgB,EAAE,WAAW;AAChE,MAAI,CAAC,SAAS,EAAE,KAAK;AAAG,QAAI,QAAQ,UAAU,EAAE,KAAK;AACzD;AAEA,SAAS,gBAAgB,GAAgB;AACrC,MAAI,EAAE,YAAY;AAAG,QAAI,qBAAqB,EAAE,SAAS;AACzD,MAAI,CAAC,sBAAO,UAAU,EAAE,OAAO;AAAG,QAAI,mBAAmB,EAAE,OAAO;AAClE,MAAI,CAAC,SAAS,EAAE,IAAI;AAAG,QAAI,gBAAgB,EAAE,IAAI;AACjD,MAAI,CAAC,SAAS,EAAE,KAAK;AAAG,QAAI,iBAAiB,EAAE,KAAK;AACxD;AAEA,SAAS,oBAAoB,GAAoB;AAC7C,MAAI,CAAC,SAAS,EAAE,IAAI;AAAG,QAAI,oBAAoB,EAAE,IAAI;AACrD,MAAI,EAAE,YAAY;AAAG,QAAI,yBAAyB,EAAE,SAAS;AAC7D,MAAI,EAAE,QAAQ;AAAG,QAAI,qBAAqB,EAAE,KAAK;AACjD,MAAI,CAAC,SAAS,EAAE,wBAAwB;AAAG,QAAI,wCAAwC,EAAE,wBAAwB;AACjH,MAAI,CAAC,SAAS,EAAE,WAAW;AAAG,QAAI,2BAA2B,EAAE,WAAW;AAC1E,MAAI,EAAE,YAAY;AAAG,QAAI,yBAAyB,EAAE,SAAS;AAC7D,MAAI,CAAC,sBAAO,UAAU,EAAE,IAAI;AAAG,QAAI,oBAAoB,EAAE,IAAI;AAC7D,MAAI,CAAC,sBAAO,UAAU,EAAE,EAAE;AAAG,QAAI,kBAAkB,EAAE,EAAE;AACvD,MAAI,CAAC,SAAS,EAAE,KAAK;AAAG,QAAI,qBAAqB,EAAE,KAAK;AAC5D;AAEA,SAAS,SAAS,GAAoB;AAClC,MAAI,CAAC,sBAAO,YAAY,CAAC,GAAG;AACxB,QAAI,sBAAO,QAAQ,CAAC;AAAA,EACxB;AACA,QAAM,MAAM,sBAAO,WAAW,CAAC;AAC/B,SAAO,MAAM,KAAK,OAAO;AAC7B;AAEA,SAAS,IAAI,WAAmB,OAAY;AACxC,QAAM,IAAI,MAAM,WAAW,SAAS,IAAI,KAAK,EAAE;AACnD;","names":["pb_1","_one_of_decls","pb_1","ErrCode","_one_of_decls","credentials","pb_1","_one_of_decls","pb_1","grpc_1","_one_of_decls","credentials","import_grpc_js","import_ethers"]}